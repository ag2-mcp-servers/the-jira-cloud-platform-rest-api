# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T16:06:34+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Any, Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    BaseSecurity,
    HTTPBasic,
    UnsuportedSecurityStub,
)
from fastapi import Header, Path, Query, UploadFile
from pydantic import conint, constr

from models import (
    AccountId,
    AccountId1,
    Action,
    ActorInputBean,
    ActorsMap,
    AddFieldBean,
    AddGroupBean,
    AddNotificationsDetails,
    AdjustEstimate,
    AnnouncementBannerConfiguration,
    AnnouncementBannerConfigurationUpdate,
    ApplicationProperty,
    ApplicationRole,
    AssociateFieldConfigurationsWithIssueTypesRequest,
    AttachmentArchiveImpl,
    AttachmentArchiveMetadataReadable,
    AttachmentMetadata,
    AttachmentSettings,
    AuditRecords,
    AutoCompleteSuggestions,
    AvailableDashboardGadgetsResponse,
    Avatar,
    Avatars,
    AvatarSize,
    BulkCustomFieldOptionCreateRequest,
    BulkCustomFieldOptionUpdateRequest,
    BulkIssueIsWatching,
    BulkIssuePropertyUpdateRequest,
    BulkPermissionGrants,
    BulkPermissionsRequestBean,
    ChangedWorklogs,
    ChangeFilterOwner,
    Check,
    Comment,
    ComponentIssuesCount,
    Configuration,
    ConnectCustomFieldValues,
    ConnectModules,
    ContainerForProjectFeatures,
    ContainerForRegisteredWebhooks,
    ContainerForWebhookIDs,
    ContainerOfWorkflowSchemeAssociations,
    ContextId,
    ConvertedJQLQueries,
    CreateCustomFieldContext,
    CreatedIssue,
    CreatedIssues,
    CreateNotificationSchemeDetails,
    CreatePriorityDetails,
    CreateProjectDetails,
    CreateResolutionDetails,
    CreateUiModificationDetails,
    CreateUpdateRoleRequestBean,
    CreateWorkflowDetails,
    CustomFieldConfigurations,
    CustomFieldContextDefaultValueUpdate,
    CustomFieldContextUpdateDetails,
    CustomFieldCreatedContextOptionsList,
    CustomFieldDefinitionJsonBean,
    CustomFieldOption,
    CustomFieldUpdatedContextOptionsList,
    CustomFieldValueUpdateDetails,
    Dashboard,
    DashboardDetails,
    DashboardGadget,
    DashboardGadgetResponse,
    DashboardGadgetSettings,
    DashboardGadgetUpdateRequest,
    DefaultShareScope,
    DefaultWorkflow,
    DeleteAndReplaceVersionBean,
    DeleteSubtasks,
    EntityProperty,
    EntityType,
    ErrorCollection,
    ErrorMessage,
    Exclude,
    ExcludeAccountIds,
    ExcludeId,
    Expand,
    FailedWebhooks,
    FieldConfiguration,
    FieldConfigurationDetails,
    FieldConfigurationItemsDetails,
    FieldConfigurationScheme,
    FieldConfigurationSchemeId,
    FieldConfigurationSchemeProjectAssociation,
    FieldContextId,
    FieldDetails,
    Fields1,
    Filter,
    Filter1,
    Format,
    FoundGroups,
    FoundUsers,
    FoundUsersAndGroups,
    FunctionKey,
    GadgetId,
    Group,
    GroupId,
    GroupName1,
    Id,
    Id1,
    Id3,
    Id8,
    Id10,
    Id11,
    Id12,
    Id14,
    IdBean,
    IssueBean,
    IssueChangelogIds,
    IssueCommentListRequestBean,
    IssueCreateMetadata,
    IssueEntityProperties,
    IssueFieldOption,
    IssueFieldOptionCreateBean,
    IssueFilterForBulkPropertyDelete,
    IssueLink,
    IssueLinkType,
    IssueLinkTypes,
    IssueList,
    IssueMatches,
    IssuePickerSuggestions,
    IssuesAndJQLQueries,
    IssueSecurityLevelId,
    IssuesUpdateBean,
    IssueTypeCreateBean,
    IssueTypeDetails,
    IssueTypeId,
    IssueTypeIds,
    IssuetypeIds,
    IssueTypeIdsToRemove,
    IssuetypeNames,
    IssueTypeSchemeDetails,
    IssueTypeSchemeID,
    IssueTypeSchemeId,
    IssueTypeSchemeProjectAssociation,
    IssueTypeSchemeUpdateDetails,
    IssueTypeScreenSchemeDetails,
    IssueTypeScreenSchemeId,
    IssueTypeScreenSchemeId1,
    IssueTypeScreenSchemeMappingDetails,
    IssueTypeScreenSchemeProjectAssociation,
    IssueTypeScreenSchemeUpdateDetails,
    IssueTypesWorkflowMapping,
    IssueTypeUpdateBean,
    IssueTypeWorkflowMapping,
    IssueUpdateDetails,
    IssueUpdateMetadata,
    JiraExpressionEvalRequestBean,
    JiraExpressionForAnalysis,
    JiraExpressionResult,
    JiraExpressionsAnalysis,
    JqlFunctionPrecomputationUpdateRequestBean,
    JQLPersonalDataMigrationRequest,
    JqlQueriesToParse,
    JqlQueriesToSanitize,
    JQLReferenceData,
    Key,
    Keys,
    License,
    LicenseMetric,
    LinkIssueRequestJsonBean,
    Locale,
    ModuleKey,
    MoveFieldBean,
    MultiIssueEntityProperties,
    MultipleCustomFieldValuesUpdateDetails,
    NewProjectTypeKey,
    NewUserDetails,
    Notification,
    NotificationScheme,
    NotificationSchemeId,
    NotificationSchemeId1,
    OperationMessage,
    OrderBy,
    OrderBy2,
    OrderBy4,
    OrderBy6,
    OrderBy8,
    OrderBy12,
    OrderBy14,
    OrderBy16,
    OrderBy18,
    OrderBy22,
    OrderOfCustomFieldOptions,
    OrderOfIssueTypes,
    PageBeanChangelog,
    PageBeanComment,
    PageBeanComponentWithIssueCount,
    PageBeanContext,
    PageBeanContextForProjectAndIssueType,
    PageBeanContextualConfiguration,
    PageBeanCustomFieldContext,
    PageBeanCustomFieldContextDefaultValue,
    PageBeanCustomFieldContextOption,
    PageBeanCustomFieldContextProjectMapping,
    PageBeanDashboard,
    PageBeanField,
    PageBeanFieldConfigurationDetails,
    PageBeanFieldConfigurationIssueTypeItem,
    PageBeanFieldConfigurationItem,
    PageBeanFieldConfigurationScheme,
    PageBeanFieldConfigurationSchemeProjects,
    PageBeanFilterDetails,
    PageBeanGroupDetails,
    PageBeanIssueFieldOption,
    PageBeanIssueSecurityLevelMember,
    PageBeanIssueTypeScheme,
    PageBeanIssueTypeSchemeMapping,
    PageBeanIssueTypeSchemeProjects,
    PageBeanIssueTypeScreenScheme,
    PageBeanIssueTypeScreenSchemeItem,
    PageBeanIssueTypeScreenSchemesProjects,
    PageBeanIssueTypeToContextMapping,
    PageBeanJqlFunctionPrecomputationBean,
    PageBeanNotificationScheme,
    PageBeanNotificationSchemeAndProjectMappingJsonBean,
    PageBeanPriority,
    PageBeanProject,
    PageBeanProjectDetails,
    PageBeanResolutionJsonBean,
    PageBeanScreen,
    PageBeanScreenScheme,
    PageBeanScreenWithTab,
    PageBeanString,
    PageBeanUiModificationDetails,
    PageBeanUser,
    PageBeanUserDetails,
    PageBeanUserKey,
    PageBeanVersion,
    PageBeanWebhook,
    PageBeanWorkflow,
    PageBeanWorkflowScheme,
    PageBeanWorkflowTransitionRules,
    PageOfChangelogs,
    PageOfComments,
    PageOfDashboards,
    PageOfStatuses,
    PageOfWorklogs,
    ParsedJqlQueries,
    PermissionGrant,
    PermissionGrants,
    Permissions,
    PermissionScheme,
    PermissionSchemes,
    PermissionsKeysBean,
    PermittedProjects,
    Priority,
    PriorityId,
    Project,
    ProjectAvatars,
    ProjectCategory,
    ProjectComponent,
    ProjectEmailAddress,
    ProjectFeatureState,
    ProjectId1,
    ProjectId2,
    ProjectId3,
    ProjectId5,
    ProjectId7,
    ProjectIdentifiers,
    ProjectIds,
    ProjectIds1,
    ProjectIssueSecurityLevels,
    ProjectIssueTypeHierarchy,
    ProjectIssueTypeMappings,
    ProjectKeys,
    ProjectRole,
    ProjectRoleActorsUpdateBean,
    ProjectType,
    ProjectTypeKey3,
    Properties,
    Properties2,
    Properties4,
    PropertyKeys,
    PublishDraftWorkflowScheme,
    RemoteIssueLink,
    RemoteIssueLinkIdentifies,
    RemoteIssueLinkRequest,
    ReorderIssuePriorities,
    ReorderIssueResolutionsRequest,
    Resolution,
    ResolutionId,
    RestApi3ApplicationPropertiesAdvancedSettingsGetResponse,
    RestApi3ApplicationPropertiesGetResponse,
    RestApi3ApplicationroleGetResponse,
    RestApi3AttachmentContentIdGetResponse,
    RestApi3AttachmentThumbnailIdGetResponse,
    RestApi3ConfigurationTimetrackingListGetResponse,
    RestApi3EventsGetResponse,
    RestApi3FieldGetResponse,
    RestApi3FilterFavouriteGetResponse,
    RestApi3FilterGetResponse,
    RestApi3FilterIdColumnsGetResponse,
    RestApi3FilterIdPermissionGetResponse,
    RestApi3FilterIdPermissionPostResponse,
    RestApi3FilterMyGetResponse,
    RestApi3IssueIssueIdOrKeyAttachmentsPostResponse,
    RestApi3IssuetypeGetResponse,
    RestApi3IssuetypeIdAlternativesGetResponse,
    RestApi3IssuetypeProjectGetResponse,
    RestApi3PriorityGetResponse,
    RestApi3ProjectCategoryGetResponse,
    RestApi3ProjectGetResponse,
    RestApi3ProjectProjectIdOrKeyComponentsGetResponse,
    RestApi3ProjectProjectIdOrKeyRoledetailsGetResponse,
    RestApi3ProjectProjectIdOrKeyRoleGetResponse,
    RestApi3ProjectProjectIdOrKeyStatusesGetResponse,
    RestApi3ProjectProjectIdOrKeyVersionsGetResponse,
    RestApi3ProjectRecentGetResponse,
    RestApi3ProjectTypeAccessibleGetResponse,
    RestApi3ProjectTypeGetResponse,
    RestApi3ResolutionGetResponse,
    RestApi3RoleGetResponse,
    RestApi3ScreensScreenIdAvailableFieldsGetResponse,
    RestApi3ScreensScreenIdTabsGetResponse,
    RestApi3ScreensScreenIdTabsTabIdFieldsGetResponse,
    RestApi3SettingsColumnsGetResponse,
    RestApi3StatuscategoryGetResponse,
    RestApi3StatusesGetResponse,
    RestApi3StatusesPostResponse,
    RestApi3StatusGetResponse,
    RestApi3TaskTaskIdCancelPostResponse,
    RestApi3UniversalAvatarViewTypeTypeAvatarIdGetResponse,
    RestApi3UniversalAvatarViewTypeTypeGetResponse,
    RestApi3UniversalAvatarViewTypeTypeOwnerEntityIdGetResponse,
    RestApi3UserAssignableMultiProjectSearchGetResponse,
    RestApi3UserAssignableSearchGetResponse,
    RestApi3UserBulkMigrationGetResponse,
    RestApi3UserColumnsGetResponse,
    RestApi3UserGroupsGetResponse,
    RestApi3UserPermissionSearchGetResponse,
    RestApi3UserSearchGetResponse,
    RestApi3UsersGetResponse,
    RestApi3UsersSearchGetResponse,
    RestApi3UserViewissueSearchGetResponse,
    RestApi3WorkflowGetResponse,
    RestApi3WorklogListPostResponse,
    RestAtlassianConnect1MigrationPropertiesEntityTypePutRequest,
    SanitizedJqlQueries,
    Scope2,
    Screen,
    ScreenableField,
    ScreenableTab,
    ScreenDetails,
    ScreenSchemeDetails,
    ScreenSchemeId,
    SearchAutoCompleteFilter,
    SearchRequestBean,
    SearchResults,
    SecurityLevel,
    SecurityScheme,
    SecuritySchemes,
    ServerInformation,
    SetDefaultPriorityRequest,
    SetDefaultResolutionRequest,
    SharePermission,
    SharePermissionInputBean,
    SimpleApplicationPropertyBean,
    Size,
    Status3,
    Status5,
    StatusCategory1,
    StatusCreateRequest,
    StatusDetails,
    StatusUpdateRequest,
    SystemAvatars,
    TaskProgressBeanObject,
    TaskProgressBeanRemoveOptionFromIssuesResult,
    TimeTrackingConfiguration,
    TimeTrackingProvider,
    Transitions,
    Type14,
    Type15,
    Type16,
    Type19,
    Types,
    UiModificationIdentifiers,
    UnrestrictedUserEmail,
    UpdateCustomFieldDetails,
    UpdateDefaultScreenScheme,
    UpdatedProjectCategory,
    UpdateFieldConfigurationSchemeDetails,
    UpdateNotificationSchemeDetails,
    UpdatePriorityDetails,
    UpdateProjectDetails,
    UpdateResolutionDetails,
    UpdateScreenDetails,
    UpdateScreenSchemeDetails,
    UpdateUiModificationDetails,
    UpdateUserToGroupBean,
    Uri,
    User,
    Username,
    ValidateQuery,
    Validation,
    Version,
    VersionIssueCounts,
    VersionMoveBean,
    VersionUnresolvedIssuesCount,
    Votes,
    Watchers,
    WebhookRegistrationDetails,
    WebhooksExpirationDate,
    WithTags,
    WorkflowIDs,
    WorkflowMode,
    WorkflowName2,
    WorkflowNames,
    WorkflowRulesSearch,
    WorkflowRulesSearchDetails,
    WorkflowScheme,
    WorkflowSchemeProjectAssociation,
    WorkflowsWithTransitionRulesDetails,
    WorkflowTransitionProperty,
    WorkflowTransitionRulesUpdate,
    WorkflowTransitionRulesUpdateErrors,
    Worklog,
    WorklogIdsRequestBean,
)

app = MCPProxy(
    contact={'email': 'ecosystem@atlassian.com', 'x-twitter': 'Atlassian'},
    description='Jira Cloud platform REST API documentation',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='http://atlassian.com/terms/',
    title='The Jira Cloud platform REST API',
    version='1001.0.0-SNAPSHOT',
    servers=[{'url': 'https://your-domain.atlassian.net'}],
)


@app.get(
    '/rest/api/3/announcementBanner',
    description=""" Returns the current announcement banner configuration.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['banner_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_banner():
    """
    Get announcement banner configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/announcementBanner',
    description=""" Updates the announcement banner configuration.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['banner_management', 'ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_banner(body: AnnouncementBannerConfigurationUpdate):
    """
    Update announcement banner configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/app/field/value',
    description=""" Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.

**[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation. """,
    tags=[
        'custom_field_management',
        'custom_field_context_operations',
        'bulk_update_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_multiple_custom_field_values(
    generate_changelog: Optional[bool] = Query(True, alias='generateChangelog'),
    body: MultipleCustomFieldValuesUpdateDetails = ...,
):
    """
    Update custom fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration',
    description=""" Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).

The result can be filtered by one of these criteria:

 *  `id`.
 *  `fieldContextId`.
 *  `issueId`.
 *  `projectKeyOrId` and `issueTypeId`.

Otherwise, all configurations are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field. """,
    tags=[
        'custom_field_management',
        'custom_field_context_operations',
        'field_configuration_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_custom_field_configuration(
    field_id_or_key: str = Path(..., alias='fieldIdOrKey'),
    id: Optional[Id] = None,
    field_context_id: Optional[FieldContextId] = Query(None, alias='fieldContextId'),
    issue_id: Optional[int_aliased] = Query(None, alias='issueId'),
    project_key_or_id: Optional[str] = Query(None, alias='projectKeyOrId'),
    issue_type_id: Optional[str] = Query(None, alias='issueTypeId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Get custom field configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration',
    description=""" Update the configuration for contexts of a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field. """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_custom_field_configuration(
    field_id_or_key: str = Path(..., alias='fieldIdOrKey'),
    body: CustomFieldConfigurations = ...,
):
    """
    Update custom field configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/app/field/{fieldIdOrKey}/value',
    description=""" Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.

**[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation. """,
    tags=['custom_field_management', 'bulk_update_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_custom_field_value(
    field_id_or_key: str = Path(..., alias='fieldIdOrKey'),
    generate_changelog: Optional[bool] = Query(True, alias='generateChangelog'),
    body: CustomFieldValueUpdateDetails = ...,
):
    """
    Update custom field value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/application-properties',
    description=""" Returns all application properties or an application property.

If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_application_property(
    key: Optional[str] = None,
    permission_level: Optional[str] = Query(None, alias='permissionLevel'),
    key_filter: Optional[str] = Query(None, alias='keyFilter'),
):
    """
    Get application property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/application-properties/advanced-settings',
    description=""" Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_advanced_settings():
    """
    Get advanced settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/application-properties/{id}',
    description=""" Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.

#### Advanced settings ####

The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  
| `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  
| `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  
| `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  
| `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  
| `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  
| `jira.table.cols.subtasks` | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | `issuetype, status, assignee, progress` |  
| `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  
| `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  
| `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  


#### Look and feel ####

The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  
| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  
| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  
| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  
| `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  
| `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  
| `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  
| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  
| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  
| `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  
| `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  
| `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  
| `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  
| `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  
| `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  


#### Other settings ####

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  


*Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_application_property(id: str, body: SimpleApplicationPropertyBean = ...):
    """
    Set application property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/applicationrole',
    description=""" Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_all_application_roles():
    """
    Get all application roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/applicationrole/{key}',
    description=""" Returns an application role.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'application_property_management',
        'user_management',
        'project_role_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_application_role(key: str):
    """
    Get application role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/content/{id}',
    description=""" Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.

To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_attachment_content(id: str, redirect: Optional[bool] = True):
    """
    Get attachment content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/meta',
    description=""" Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.

Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_attachment_meta():
    """
    Get Jira attachment settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/thumbnail/{id}',
    description=""" Returns the thumbnail of an attachment.

To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_attachment_thumbnail(
    id: str,
    redirect: Optional[bool] = True,
    fallback_to_default: Optional[bool] = Query(True, alias='fallbackToDefault'),
    width: Optional[int_aliased] = None,
    height: Optional[int_aliased] = None,
):
    """
    Get attachment thumbnail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/attachment/{id}',
    description=""" Deletes an attachment from an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the project holding the issue containing the attachment:

 *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
 *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_attachment(id: str):
    """
    Delete attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/{id}',
    description=""" Returns the metadata for an attachment. Note that the attachment itself is not returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_attachment(id: str):
    """
    Get attachment metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/{id}/expand/human',
    description=""" Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.

Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def expand_attachment_for_humans(id: str):
    """
    Get all metadata for an expanded attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/attachment/{id}/expand/raw',
    description=""" Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.

Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def expand_attachment_for_machines(id: str):
    """
    Get contents metadata for an expanded attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/auditing/record',
    description=""" Returns a list of audit records. The list can be filtered to include items:

 *  where each item in `filter` has at least one match in any of these fields:
    
     *  `summary`
     *  `category`
     *  `eventSource`
     *  `objectItem.name` If the object is a user, account ID is available to filter.
     *  `objectItem.parentName`
     *  `objectItem.typeName`
     *  `changedValues.changedFrom`
     *  `changedValues.changedTo`
     *  `remoteAddress`
    
    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
 *  created on or after a date and time.
 *  created or or before a date and time.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['audit_record_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_audit_records(
    offset: Optional[int_aliased] = 0,
    limit: Optional[int_aliased] = 1000,
    filter: Optional[str] = None,
    from_: Optional[datetime] = Query(None, alias='from'),
    to: Optional[datetime] = None,
):
    """
    Get audit records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/avatar/{type}/system',
    description=""" Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['avatar_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_system_avatars(type: Type14):
    """
    Get system avatars by type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/comment/list',
    description=""" Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Comments are returned where the user:

 *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_comments_by_ids(
    expand: Optional[str] = None, body: IssueCommentListRequestBean = ...
):
    """
    Get comments by IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/comment/{commentId}/properties',
    description=""" Returns the keys of all the properties of a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_comment_property_keys(comment_id: str = Path(..., alias='commentId')):
    """
    Get comment property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
    description=""" Deletes a comment property.

**[Permissions](#permissions) required:** either of:

 *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
 *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.

Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group. """,
    tags=['comment_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_comment_property(
    comment_id: str = Path(..., alias='commentId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete comment property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
    description=""" Returns the value of a comment property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_comment_property(
    comment_id: str = Path(..., alias='commentId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get comment property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/comment/{commentId}/properties/{propertyKey}',
    description=""" Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** either of:

 *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
 *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.

Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group. """,
    tags=['comment_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_comment_property(
    comment_id: str = Path(..., alias='commentId'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set comment property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/component',
    description=""" Creates a component. Use components to provide containers for issues within a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['component_management', 'project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_component(body: ProjectComponent):
    """
    Create component
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/component/{id}',
    description=""" Deletes a component.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['component_management', 'project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_component(
    id: str, move_issues_to: Optional[str] = Query(None, alias='moveIssuesTo')
):
    """
    Delete component
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/component/{id}',
    description=""" Returns a component.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component. """,
    tags=['component_management', 'project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_component(id: str):
    """
    Get component
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/component/{id}',
    description=""" Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['component_management', 'project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_component(id: str, body: ProjectComponent = ...):
    """
    Update component
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/component/{id}/relatedIssueCounts',
    description=""" Returns the counts of issues assigned to the component.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['issue_management', 'issue_metadata_retrieval', 'component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_component_related_issues(id: str):
    """
    Get component issues count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/configuration',
    description=""" Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_configuration():
    """
    Get global settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/configuration/timetracking',
    description=""" Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_selected_time_tracking_implementation():
    """
    Get selected time tracking provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/configuration/timetracking',
    description=""" Selects a time tracking provider.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def select_time_tracking_implementation(body: TimeTrackingProvider):
    """
    Select time tracking provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/configuration/timetracking/list',
    description=""" Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_available_time_tracking_implementations():
    """
    Get all time tracking providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/configuration/timetracking/options',
    description=""" Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_shared_time_tracking_configuration():
    """
    Get time tracking settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/configuration/timetracking/options',
    description=""" Sets the time tracking settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_shared_time_tracking_configuration(body: TimeTrackingConfiguration):
    """
    Set time tracking settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/customFieldOption/{id}',
    description=""" Returns a custom field option. For example, an option in a select list.

Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The custom field option is returned as follows:

 *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view. """,
    tags=['custom_field_management', 'custom_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_custom_field_option(id: str):
    """
    Get custom field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard',
    description=""" Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_dashboards(
    filter: Optional[Filter1] = None,
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(20, alias='maxResults'),
):
    """
    Get all dashboards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/dashboard',
    description=""" Creates a dashboard.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_dashboard(body: DashboardDetails):
    """
    Create dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/gadgets',
    description=""" Gets a list of all available gadgets that can be added to all dashboards.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling', 'dashboard_item_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_available_dashboard_gadgets():
    """
    Get available gadgets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/search',
    description=""" Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:

 *  Dashboards owned by the user. Not returned for anonymous users.
 *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
 *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
 *  Dashboards shared with a public project.
 *  Dashboards shared with the public. """,
    tags=['dashboard_handling', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_dashboards_paginated(
    dashboard_name: Optional[str] = Query(None, alias='dashboardName'),
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    owner: Optional[str] = None,
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    project_id: Optional[int_aliased] = Query(None, alias='projectId'),
    order_by: Optional[OrderBy] = Query('name', alias='orderBy'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    status: Optional[Status3] = 'active',
    expand: Optional[str] = None,
):
    """
    Search for dashboards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/{dashboardId}/gadget',
    description=""" Returns a list of dashboard gadgets on a dashboard.

This operation returns:

 *  Gadgets from a list of IDs, when `id` is set.
 *  Gadgets with a module key, when `moduleKey` is set.
 *  Gadgets from a list of URIs, when `uri` is set.
 *  All gadgets, when no other parameters are set.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_gadgets(
    dashboard_id: int_aliased = Path(..., alias='dashboardId'),
    module_key: Optional[ModuleKey] = Query(None, alias='moduleKey'),
    uri: Optional[Uri] = None,
    gadget_id: Optional[GadgetId] = Query(None, alias='gadgetId'),
):
    """
    Get gadgets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/dashboard/{dashboardId}/gadget',
    description=""" Adds a gadget to a dashboard.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_gadget(
    dashboard_id: int_aliased = Path(..., alias='dashboardId'),
    body: DashboardGadgetSettings = ...,
):
    """
    Add gadget to dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}',
    description=""" Removes a dashboard gadget from a dashboard.

When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling', 'dashboard_item_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_gadget(
    dashboard_id: int_aliased = Path(..., alias='dashboardId'),
    gadget_id: int_aliased = Path(..., alias='gadgetId'),
):
    """
    Remove gadget from dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}',
    description=""" Changes the title, position, and color of the gadget on a dashboard.

**[Permissions](#permissions) required:** None. """,
    tags=['dashboard_handling', 'dashboard_item_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_gadget(
    dashboard_id: int_aliased = Path(..., alias='dashboardId'),
    gadget_id: int_aliased = Path(..., alias='gadgetId'),
    body: DashboardGadgetUpdateRequest = ...,
):
    """
    Update gadget on dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties',
    description=""" Returns the keys of all properties for a dashboard item.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted. """,
    tags=['dashboard_handling', 'dashboard_item_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_dashboard_item_property_keys(
    dashboard_id: str = Path(..., alias='dashboardId'),
    item_id: str = Path(..., alias='itemId'),
):
    """
    Get dashboard item property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
    description=""" Deletes a dashboard item property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. """,
    tags=['dashboard_item_properties', 'dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_dashboard_item_property(
    dashboard_id: str = Path(..., alias='dashboardId'),
    item_id: str = Path(..., alias='itemId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete dashboard item property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
    description=""" Returns the key and value of a dashboard item property.

A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).

When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.

There is no resource to set or get dashboard items.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted. """,
    tags=['dashboard_item_properties', 'dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_dashboard_item_property(
    dashboard_id: str = Path(..., alias='dashboardId'),
    item_id: str = Path(..., alias='itemId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get dashboard item property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}',
    description=""" Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.

A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).

When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.

There is no resource to set or get dashboard items.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. """,
    tags=['dashboard_item_properties', 'dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_dashboard_item_property(
    dashboard_id: str = Path(..., alias='dashboardId'),
    item_id: str = Path(..., alias='itemId'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set dashboard item property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/dashboard/{id}',
    description=""" Deletes a dashboard.

**[Permissions](#permissions) required:** None

The dashboard to be deleted must be owned by the user. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_dashboard(id: str):
    """
    Delete dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/dashboard/{id}',
    description=""" Returns a dashboard.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_dashboard(id: str):
    """
    Get dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/dashboard/{id}',
    description=""" Updates a dashboard, replacing all the dashboard details with those provided.

**[Permissions](#permissions) required:** None

The dashboard to be updated must be owned by the user. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_dashboard(id: str, body: DashboardDetails = ...):
    """
    Update dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/dashboard/{id}/copy',
    description=""" Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.

**[Permissions](#permissions) required:** None

The dashboard to be copied must be owned by or shared with the user. """,
    tags=['dashboard_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def copy_dashboard(id: str, body: DashboardDetails = ...):
    """
    Copy dashboard
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/events',
    description=""" Returns all issue events.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['event_logging'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_events():
    """
    Get events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/expression/analyse',
    description=""" Analyses and validates Jira expressions.

As an experimental feature, this operation can also attempt to type-check the expressions.

Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).

**[Permissions](#permissions) required**: None. """,
    tags=['jira_expression_evaluation'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analyse_expression(
    check: Optional[Check] = 'syntax', body: JiraExpressionForAnalysis = ...
):
    """
    Analyse Jira expression
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/expression/eval',
    description=""" Evaluates a Jira expression and returns its value.

This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.

#### Context variables ####

The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.

 *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
 *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
 *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
 *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
 *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
 *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
 *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
 *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
 *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.

Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:

 *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
 *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
 *  `json`: A JSON object containing custom content.
 *  `list`: A JSON list of `user`, `issue`, or `json` variable types.

This operation can be accessed anonymously.

**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  
Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`). """,
    tags=['jira_expression_evaluation'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def evaluate_jira_expression(
    expand: Optional[str] = None, body: JiraExpressionEvalRequestBean = ...
):
    """
    Evaluate Jira expression
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field',
    description=""" Returns system and custom issue fields according to the following rules:

 *  Fields that cannot be added to the issue navigator are always returned.
 *  Fields that cannot be placed on an issue screen are always returned.
 *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
 *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_fields():
    """
    Get fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field',
    description=""" Creates a custom field.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_custom_field(body: CustomFieldDefinitionJsonBean):
    """
    Create custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/search',
    description=""" Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:

 *  all fields
 *  specific fields, by defining `id`
 *  fields that contain a string in the field name or description, by defining `query`
 *  specific fields that contain a string in the field name or description, by defining `id` and `query`

Only custom fields can be queried, `type` must be set to `custom`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_context_operations',
        'field_configuration_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_fields_paginated(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    type: Optional[Type15] = None,
    id: Optional[Id1] = None,
    query: Optional[str] = None,
    order_by: Optional[OrderBy2] = Query(None, alias='orderBy'),
    expand: Optional[str] = None,
):
    """
    Get fields paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/search/trashed',
    description=""" Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.

Only custom fields can be queried, `type` must be set to `custom`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_trash_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_trashed_fields_paginated(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    id: Optional[Id1] = None,
    query: Optional[str] = None,
    expand: Optional[Expand] = None,
    order_by: Optional[str] = Query(None, alias='orderBy'),
):
    """
    Get fields in trash paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}',
    description=""" Updates a custom field.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_custom_field(
    field_id: str = Path(..., alias='fieldId'), body: UpdateCustomFieldDetails = ...
):
    """
    Update custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/context',
    description=""" Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:

 *  With no other parameters set, all contexts.
 *  By defining `id` only, all contexts from the list of IDs.
 *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
 *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_contexts_for_field(
    field_id: str = Path(..., alias='fieldId'),
    is_any_issue_type: Optional[bool] = Query(None, alias='isAnyIssueType'),
    is_global_context: Optional[bool] = Query(None, alias='isGlobalContext'),
    context_id: Optional[ContextId] = Query(None, alias='contextId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get custom field contexts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldId}/context',
    description=""" Creates a custom field context.

If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_custom_field_context(
    field_id: str = Path(..., alias='fieldId'), body: CreateCustomFieldContext = ...
):
    """
    Create custom field context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/context/defaultValue',
    description=""" Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  
The returned object depends on type of the custom field:

 *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
 *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
 *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
 *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
 *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
 *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
 *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
 *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
 *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
 *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
 *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
 *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
 *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
 *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
 *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
 *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
 *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
 *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.

Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:

 *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
 *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
 *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
 *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
 *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
 *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
 *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
 *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
 *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_default_values(
    field_id: str = Path(..., alias='fieldId'),
    context_id: Optional[ContextId] = Query(None, alias='contextId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get custom field contexts default values
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/defaultValue',
    description=""" Sets default for contexts of a custom field. Default are defined using these objects:

 *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
 *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
 *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
 *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
 *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
 *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
 *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
 *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
 *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
 *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
 *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
 *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
 *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
 *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
 *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
 *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
 *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
 *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.

Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:

 *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
 *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
 *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
 *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
 *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
 *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
 *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
 *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
 *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.

Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_default_values(
    field_id: str = Path(..., alias='fieldId'),
    body: CustomFieldContextDefaultValueUpdate = ...,
):
    """
    Set custom field contexts default values
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/context/issuetypemapping',
    description=""" Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_mappings_for_contexts(
    field_id: str = Path(..., alias='fieldId'),
    context_id: Optional[ContextId] = Query(None, alias='contextId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get issue types for custom field context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldId}/context/mapping',
    description=""" Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.

If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.

Duplicate project and issue type mappings cannot be provided in the request.

The order of the returned values is the same as provided in the request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_custom_field_contexts_for_projects_and_issue_types(
    field_id: str = Path(..., alias='fieldId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    body: ProjectIssueTypeMappings = ...,
):
    """
    Get custom field contexts for projects and issue types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/context/projectmapping',
    description=""" Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_context_mapping(
    field_id: str = Path(..., alias='fieldId'),
    context_id: Optional[ContextId] = Query(None, alias='contextId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get project mappings for custom field context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/field/{fieldId}/context/{contextId}',
    description=""" Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_custom_field_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
):
    """
    Delete custom field context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/{contextId}',
    description=""" Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_custom_field_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: CustomFieldContextUpdateDetails = ...,
):
    """
    Update custom field context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype',
    description=""" Adds issue types to a custom field context, appending the issue types to the issue types list.

A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.

If any of the issue types exists in the custom field context, the operation fails and no issue types are added.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_context_operations', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_issue_types_to_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: IssueTypeIds = ...,
):
    """
    Add issue types to context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove',
    description=""" Removes issue types from a custom field context.

A custom field context without any issue types applies to all issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_context_operations', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_issue_types_from_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: IssueTypeIds = ...,
):
    """
    Remove issue types from context
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/context/{contextId}/option',
    description=""" Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'custom_field_context_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_options_for_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    option_id: Optional[int_aliased] = Query(None, alias='optionId'),
    only_options: Optional[bool] = Query(False, alias='onlyOptions'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Get custom field options (context)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldId}/context/{contextId}/option',
    description=""" Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.

The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'custom_field_context_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_custom_field_option(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: BulkCustomFieldOptionCreateRequest = ...,
):
    """
    Create custom field options (context)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/{contextId}/option',
    description=""" Updates the options of a custom field.

If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.

Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'custom_field_context_operations',
        'bulk_update_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_custom_field_option(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: BulkCustomFieldOptionUpdateRequest = ...,
):
    """
    Update custom field options (context)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/{contextId}/option/move',
    description=""" Changes the order of custom field options or cascading options in a context.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'custom_field_context_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def reorder_custom_field_options(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: OrderOfCustomFieldOptions = ...,
):
    """
    Reorder custom field options (context)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}',
    description=""" Deletes a custom field option.

Options with cascading options cannot be deleted without deleting the cascading options first.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'custom_field_context_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_custom_field_option(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    option_id: int_aliased = Path(..., alias='optionId'),
):
    """
    Delete custom field options (context)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldId}/context/{contextId}/project',
    description=""" Assigns a custom field context to projects.

If any project in the request is assigned to any context of the custom field, the operation fails.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_context_operations',
        'project_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_projects_to_custom_field_context(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: ProjectIds = ...,
):
    """
    Assign custom field context to projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove',
    description=""" Removes a custom field context from projects.

A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.

If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_custom_field_context_from_projects(
    field_id: str = Path(..., alias='fieldId'),
    context_id: int_aliased = Path(..., alias='contextId'),
    body: ProjectIds = ...,
):
    """
    Remove custom field context from projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/contexts',
    description=""" Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_context_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_contexts_for_field_deprecated(
    field_id: str = Path(..., alias='fieldId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(20, alias='maxResults'),
):
    """
    Get contexts for a field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldId}/screens',
    description=""" Returns a [paginated](#pagination) list of the screens a field is used in.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'custom_field_context_operations',
        'custom_field_option_management',
        'field_configuration_management',
        'screen_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_screens_for_field(
    field_id: str = Path(..., alias='fieldId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
    expand: Optional[str] = None,
):
    """
    Get screens for a field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldKey}/option',
    description=""" Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=['custom_field_option_management', 'issue_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_issue_field_options(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    field_key: str = Path(..., alias='fieldKey'),
):
    """
    Get all issue field options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{fieldKey}/option',
    description=""" Creates an option for a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'issue_field_option_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_field_option(
    field_key: str = Path(..., alias='fieldKey'), body: IssueFieldOptionCreateBean = ...
):
    """
    Create issue field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldKey}/option/suggestions/edit',
    description=""" Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['issue_field_option_management', 'custom_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_selectable_issue_field_options(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    project_id: Optional[int_aliased] = Query(None, alias='projectId'),
    field_key: str = Path(..., alias='fieldKey'),
):
    """
    Get selectable issue field options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldKey}/option/suggestions/search',
    description=""" Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['issue_field_option_management', 'custom_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_visible_issue_field_options(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(None, alias='maxResults'),
    project_id: Optional[int_aliased] = Query(None, alias='projectId'),
    field_key: str = Path(..., alias='fieldKey'),
):
    """
    Get visible issue field options
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/field/{fieldKey}/option/{optionId}',
    description=""" Deletes an option from a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=['custom_field_option_management', 'issue_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_field_option(
    field_key: str = Path(..., alias='fieldKey'),
    option_id: int_aliased = Path(..., alias='optionId'),
):
    """
    Delete issue field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/field/{fieldKey}/option/{optionId}',
    description=""" Returns an option from a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=['custom_field_option_management', 'issue_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_field_option(
    field_key: str = Path(..., alias='fieldKey'),
    option_id: int_aliased = Path(..., alias='optionId'),
):
    """
    Get issue field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/field/{fieldKey}/option/{optionId}',
    description=""" Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=[
        'custom_field_management',
        'custom_field_option_management',
        'issue_field_option_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_issue_field_option(
    field_key: str = Path(..., alias='fieldKey'),
    option_id: int_aliased = Path(..., alias='optionId'),
    body: IssueFieldOption = ...,
):
    """
    Update issue field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/field/{fieldKey}/option/{optionId}/issue',
    description=""" Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.

Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.

This is an [asynchronous operation](#async). The response object contains a link to the long-running task.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. """,
    tags=['custom_field_option_management', 'issue_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def replace_issue_field_option(
    replace_with: Optional[int_aliased] = Query(None, alias='replaceWith'),
    jql: Optional[str] = None,
    override_screen_security: Optional[bool] = Query(
        False, alias='overrideScreenSecurity'
    ),
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
    field_key: str = Path(..., alias='fieldKey'),
    option_id: int_aliased = Path(..., alias='optionId'),
):
    """
    Replace issue field option
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/field/{id}',
    description=""" Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_custom_field(id: str):
    """
    Delete custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{id}/restore',
    description=""" Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_trash_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def restore_custom_field(id: str):
    """
    Restore custom field from trash
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/field/{id}/trash',
    description=""" Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'custom_field_trash_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def trash_custom_field(id: str):
    """
    Move custom field to trash
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/fieldconfiguration',
    description=""" Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:

 *  a list of field configuration item IDs.
 *  whether the field configuration is a default.
 *  whether the field configuration name or description contains a query string.

Only field configurations used in company-managed (classic) projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_field_configurations(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    id: Optional[Id3] = None,
    is_default: Optional[bool] = Query(False, alias='isDefault'),
    query: Optional[str] = '',
):
    """
    Get all field configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/fieldconfiguration',
    description=""" Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.

This operation can only create configurations for use in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_field_configuration(body: FieldConfigurationDetails):
    """
    Create field configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/fieldconfiguration/{id}',
    description=""" Deletes a field configuration.

This operation can only delete configurations used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_field_configuration(id: int_aliased):
    """
    Delete field configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/fieldconfiguration/{id}',
    description=""" Updates a field configuration. The name and the description provided in the request override the existing values.

This operation can only update configurations used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_field_configuration(id: int_aliased, body: FieldConfigurationDetails = ...):
    """
    Update field configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/fieldconfiguration/{id}/fields',
    description=""" Returns a [paginated](#pagination) list of all fields for a configuration.

Only the fields from configurations used in company-managed (classic) projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_field_configuration_items(
    id: int_aliased,
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get field configuration items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/fieldconfiguration/{id}/fields',
    description=""" Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.

This operation can only update field configurations used in company-managed (classic) projects.

The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_field_configuration_items(
    id: int_aliased, body: FieldConfigurationItemsDetails = ...
):
    """
    Update field configuration items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/fieldconfigurationscheme',
    description=""" Returns a [paginated](#pagination) list of field configuration schemes.

Only field configuration schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_field_configuration_schemes(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    id: Optional[Id3] = None,
):
    """
    Get all field configuration schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/fieldconfigurationscheme',
    description=""" Creates a field configuration scheme.

This operation can only create field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_field_configuration_scheme(body: UpdateFieldConfigurationSchemeDetails):
    """
    Create field configuration scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/fieldconfigurationscheme/mapping',
    description=""" Returns a [paginated](#pagination) list of field configuration issue type items.

Only items used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'field_configuration_management',
        'issue_type_management',
        'custom_field_context_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_field_configuration_scheme_mappings(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    field_configuration_scheme_id: Optional[FieldConfigurationSchemeId] = Query(
        None, alias='fieldConfigurationSchemeId'
    ),
):
    """
    Get field configuration issue type items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/fieldconfigurationscheme/project',
    description=""" Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.

The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.

Only field configuration schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_field_configuration_scheme_project_mapping(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    project_id: ProjectId1 = Query(..., alias='projectId'),
):
    """
    Get field configuration schemes for projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/fieldconfigurationscheme/project',
    description=""" Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.

Field configuration schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_field_configuration_scheme_to_project(
    body: FieldConfigurationSchemeProjectAssociation,
):
    """
    Assign field configuration scheme to project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/fieldconfigurationscheme/{id}',
    description=""" Deletes a field configuration scheme.

This operation can only delete field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_field_configuration_scheme(id: int_aliased):
    """
    Delete field configuration scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/fieldconfigurationscheme/{id}',
    description=""" Updates a field configuration scheme.

This operation can only update field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['field_configuration_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_field_configuration_scheme(
    id: int_aliased, body: UpdateFieldConfigurationSchemeDetails = ...
):
    """
    Update field configuration scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/fieldconfigurationscheme/{id}/mapping',
    description=""" Assigns issue types to field configurations on field configuration scheme.

This operation can only modify field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'field_configuration_management',
        'issue_type_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_field_configuration_scheme_mapping(
    id: int_aliased, body: AssociateFieldConfigurationsWithIssueTypesRequest = ...
):
    """
    Assign issue types to field configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete',
    description=""" Removes issue types from the field configuration scheme.

This operation can only modify field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'field_configuration_management',
        'issue_type_scheme_management',
        'issue_type_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_issue_types_from_global_field_configuration_scheme(
    id: int_aliased, body: IssueTypeIdsToRemove = ...
):
    """
    Remove issue types from field configuration scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter',
    description=""" Returns all filters. Deprecated, use [ Search for filters](#api-rest-api-3-filter-search-get) that supports search and pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, only the following filters are returned:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_filters(expand: Optional[str] = None):
    """
    Get filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/filter',
    description=""" Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_filter(
    expand: Optional[str] = None,
    override_share_permissions: Optional[bool] = Query(
        False, alias='overrideSharePermissions'
    ),
    body: Filter = ...,
):
    """
    Create filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/defaultShareScope',
    description=""" Returns the default sharing settings for new filters and dashboards for a user.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['share_permission_management', 'application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_default_share_scope():
    """
    Get default share scope
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/filter/defaultShareScope',
    description=""" Sets the default sharing for new filters and dashboards for a user.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['share_permission_management', 'application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_default_share_scope(body: DefaultShareScope):
    """
    Set default share scope
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/favourite',
    description=""" Returns the visible favorite filters of the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public.

For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_favourite_filters(expand: Optional[str] = None):
    """
    Get favorite filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/my',
    description=""" Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.

**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public.

For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_my_filters(
    expand: Optional[str] = None,
    include_favourites: Optional[bool] = Query(False, alias='includeFavourites'),
):
    """
    Get my filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/search',
    description=""" Returns a [paginated](#pagination) list of filters. Use this operation to get:

 *  specific filters, by defining `id` only.
 *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['filter_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_filters_paginated(
    filter_name: Optional[str] = Query(None, alias='filterName'),
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    owner: Optional[str] = None,
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    project_id: Optional[int_aliased] = Query(None, alias='projectId'),
    id: Optional[Id3] = None,
    order_by: Optional[OrderBy4] = Query('name', alias='orderBy'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    expand: Optional[str] = None,
    override_share_permissions: Optional[bool] = Query(
        False, alias='overrideSharePermissions'
    ),
):
    """
    Search for filters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/filter/{id}',
    description=""" Delete a filter.

**[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_filter(id: int_aliased):
    """
    Delete filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/{id}',
    description=""" Returns a filter.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, the filter is only returned where it is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_filter(
    id: int_aliased,
    expand: Optional[str] = None,
    override_share_permissions: Optional[bool] = Query(
        False, alias='overrideSharePermissions'
    ),
):
    """
    Get filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/filter/{id}',
    description=""" Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.

**[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter. """,
    tags=['filter_management', 'share_permission_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_filter(
    id: int_aliased,
    expand: Optional[str] = None,
    override_share_permissions: Optional[bool] = Query(
        False, alias='overrideSharePermissions'
    ),
    body: Filter = ...,
):
    """
    Update filter
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/filter/{id}/columns',
    description=""" Reset the user's column configuration for the filter to the default.

**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['column_management', 'user_columns_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def reset_columns(id: int_aliased):
    """
    Reset columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/{id}/columns',
    description=""" Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, column details are only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['column_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_columns(id: int_aliased):
    """
    Get columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/filter/{id}/columns',
    description=""" Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.

The parameters for this resource are expressed as HTML form data. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`

**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['column_management', 'user_columns_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_columns(id: int_aliased, file: UploadFile = ...):
    """
    Set columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/filter/{id}/favourite',
    description=""" Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_favourite_for_filter(id: int_aliased, expand: Optional[str] = None):
    """
    Remove filter as favorite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/filter/{id}/favourite',
    description=""" Add a filter as a favorite for the user.

**[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_favourite_for_filter(id: int_aliased, expand: Optional[str] = None):
    """
    Add filter as favorite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/filter/{id}/owner',
    description=""" Changes the owner of the filter.

**[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['filter_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def change_filter_owner(id: int_aliased, body: ChangeFilterOwner = ...):
    """
    Change filter owner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/{id}/permission',
    description=""" Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, share permissions are only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['share_permission_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_share_permissions(id: int_aliased):
    """
    Get share permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/filter/{id}/permission',
    description=""" Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.

Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).

**[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter. """,
    tags=['share_permission_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_share_permission(id: int_aliased, body: SharePermissionInputBean = ...):
    """
    Add share permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/filter/{id}/permission/{permissionId}',
    description=""" Deletes a share permission from a filter.

**[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter. """,
    tags=['share_permission_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_share_permission(
    id: int_aliased, permission_id: int_aliased = Path(..., alias='permissionId')
):
    """
    Delete share permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/filter/{id}/permission/{permissionId}',
    description=""" Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, a share permission is only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public. """,
    tags=['share_permission_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_share_permission(
    id: int_aliased, permission_id: int_aliased = Path(..., alias='permissionId')
):
    """
    Get share permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/group',
    description=""" Deletes a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_group(
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    swap_group: Optional[str] = Query(None, alias='swapGroup'),
    swap_group_id: Optional[str] = Query(None, alias='swapGroupId'),
):
    """
    Remove group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/group',
    description=""" This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).

Returns all users in a group.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_group(
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    expand: Optional[str] = None,
):
    """
    Get group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/group',
    description=""" Creates a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_group(body: AddGroupBean):
    """
    Create group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/group/bulk',
    description=""" Returns a [paginated](#pagination) list of groups.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_get_groups(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    group_name: Optional[GroupName1] = Query(None, alias='groupName'),
    access_type: Optional[str] = Query(None, alias='accessType'),
    application_key: Optional[str] = Query(None, alias='applicationKey'),
):
    """
    Bulk get groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/group/member',
    description=""" Returns a [paginated](#pagination) list of all users in a group.

Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_users_from_group(
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    include_inactive_users: Optional[bool] = Query(False, alias='includeInactiveUsers'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get users from group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/group/user',
    description=""" Removes a user from a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_user_from_group(
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    username: Optional[str] = None,
    account_id: constr(max_length=128) = Query(..., alias='accountId'),
):
    """
    Remove user from group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/group/user',
    description=""" Adds a user to a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_user_to_group(
    groupname: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    body: UpdateUserToGroupBean = ...,
):
    """
    Add user to group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/groups/picker',
    description=""" Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.

The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.

The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.

*Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list. """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_groups(
    account_id: Optional[str] = Query(None, alias='accountId'),
    query: Optional[str] = None,
    exclude: Optional[Exclude] = None,
    exclude_id: Optional[ExcludeId] = Query(None, alias='excludeId'),
    max_results: Optional[int_aliased] = Query(None, alias='maxResults'),
    case_insensitive: Optional[bool] = Query(False, alias='caseInsensitive'),
    user_name: Optional[str] = Query(None, alias='userName'),
):
    """
    Find groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/groupuserpicker',
    description=""" Returns a list of users and groups matching a string. The string is used:

 *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
 *  for groups, to find a case-sensitive match with group name.

For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.

Optionally, the search can be refined to:

 *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
    
     *  projects.
     *  issue types.
    
    If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
 *  not return Connect app users and groups.
 *  return groups that have a case-insensitive match with the query.

The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users_and_groups(
    query: str,
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    show_avatar: Optional[bool] = Query(False, alias='showAvatar'),
    field_id: Optional[str] = Query(None, alias='fieldId'),
    project_id: Optional[ProjectId2] = Query(None, alias='projectId'),
    issue_type_id: Optional[IssueTypeId] = Query(None, alias='issueTypeId'),
    avatar_size: Optional[AvatarSize] = Query('xsmall', alias='avatarSize'),
    case_insensitive: Optional[bool] = Query(False, alias='caseInsensitive'),
    exclude_connect_addons: Optional[bool] = Query(False, alias='excludeConnectAddons'),
):
    """
    Find users and groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/instance/license',
    description=""" Returns licensing information about the Jira instance.

**[Permissions](#permissions) required:** None. """,
    tags=['license_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_license():
    """
    Get license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue',
    description=""" Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.

The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.

Creating a subtask differs from creating an issue as follows:

 *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
 *  `parent` must contain the ID or key of the parent issue.

In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.

**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created. """,
    tags=['issue_management', 'issue_property_management', 'issue_notifications'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue(
    update_history: Optional[bool] = Query(False, alias='updateHistory'),
    body: IssueUpdateDetails = ...,
):
    """
    Create issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/bulk',
    description=""" Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.

The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.

Creating a subtask differs from creating an issue as follows:

 *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
 *  `parent` the must contain the ID or key of the parent issue.

**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created. """,
    tags=['issue_management', 'bulk_issue_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issues(body: IssuesUpdateBean):
    """
    Bulk create issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/createmeta',
    description=""" Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).

The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects. """,
    tags=['issue_metadata_retrieval', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_create_issue_meta(
    project_ids: Optional[ProjectIds1] = Query(None, alias='projectIds'),
    project_keys: Optional[ProjectKeys] = Query(None, alias='projectKeys'),
    issuetype_ids: Optional[IssuetypeIds] = Query(None, alias='issuetypeIds'),
    issuetype_names: Optional[IssuetypeNames] = Query(None, alias='issuetypeNames'),
    expand: Optional[str] = None,
):
    """
    Get create issue metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/picker',
    description=""" Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.

This operation returns two lists:

 *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
 *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=[
        'issue_management',
        'issue_metadata_retrieval',
        'issue_search_and_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_picker_resource(
    query: Optional[str] = None,
    current_j_q_l: Optional[str] = Query(None, alias='currentJQL'),
    current_issue_key: Optional[str] = Query(None, alias='currentIssueKey'),
    current_project_id: Optional[str] = Query(None, alias='currentProjectId'),
    show_sub_tasks: Optional[bool] = Query(None, alias='showSubTasks'),
    show_sub_task_parent: Optional[bool] = Query(None, alias='showSubTaskParent'),
):
    """
    Get issue picker suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/properties',
    description=""" Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.

This operation is:

 *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=[
        'issue_property_management',
        'bulk_issue_operations',
        'bulk_update_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_set_issues_properties_list(body: IssueEntityProperties):
    """
    Bulk set issues properties by list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/properties/multi',
    description=""" Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.

This operation is:

 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
 *  non-transactional. Updating some entities may fail. Such information will available in the task result.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_property_management', 'bulk_issue_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_set_issue_properties_by_issue(body: MultiIssueEntityProperties):
    """
    Bulk set issue properties by issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/properties/{propertyKey}',
    description=""" Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.

The criteria the filter used to identify eligible issues are:

 *  `entityIds` Only issues from this list are eligible.
 *  `currentValue` Only issues with the property set to this value are eligible.

If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.

If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.

This operation is:

 *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue. """,
    tags=['issue_property_management', 'bulk_issue_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_delete_issue_property(
    property_key: str = Path(..., alias='propertyKey'),
    body: IssueFilterForBulkPropertyDelete = ...,
):
    """
    Bulk delete issue property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/properties/{propertyKey}',
    description=""" Sets a property value on multiple issues.

The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.

The issues to be updated can be specified by a filter.

The filter identifies issues eligible for update using these criteria:

 *  `entityIds` Only issues from this list are eligible.
 *  `currentValue` Only issues with the property set to this value are eligible.
 *  `hasProperty`:
    
     *  If *true*, only issues with the property are eligible.
     *  If *false*, only issues without the property are eligible.

If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.

If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).

The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.

This operation is:

 *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue. """,
    tags=['issue_property_management', 'bulk_issue_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_set_issue_property(
    property_key: str = Path(..., alias='propertyKey'),
    body: BulkIssuePropertyUpdateRequest = ...,
):
    """
    Bulk set issue property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/watching',
    description=""" Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_management', 'bulk_issue_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_is_watching_issue_bulk(body: IssueList):
    """
    Get is watching issue bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}',
    description=""" Deletes an issue.

An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    delete_subtasks: Optional[DeleteSubtasks] = Query('false', alias='deleteSubtasks'),
):
    """
    Delete issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}',
    description=""" Returns the details for an issue.

The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=[
        'issue_management',
        'issue_metadata_retrieval',
        'issue_field_option_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    fields: Optional[Fields1] = None,
    fields_by_keys: Optional[bool] = Query(False, alias='fieldsByKeys'),
    expand: Optional[str] = None,
    properties: Optional[Properties] = None,
    update_history: Optional[bool] = Query(False, alias='updateHistory'),
):
    """
    Get issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}',
    description=""" Edits an issue. A transition may be applied and issue properties updated as part of the edit.

The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).

The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.

Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=[
        'issue_management',
        'issue_notifications',
        'issue_properties',
        'issue_changelog',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def edit_issue(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    notify_users: Optional[bool] = Query(True, alias='notifyUsers'),
    override_screen_security: Optional[bool] = Query(
        False, alias='overrideScreenSecurity'
    ),
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
    body: IssueUpdateDetails = ...,
):
    """
    Edit issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/assignee',
    description=""" Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.

If `name` or `accountId` is set to:

 *  `"-1"`, the issue is assigned to the default assignee for the project.
 *  `null`, the issue is set to unassigned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=[
        'issue_management',
        'issue_notifications',
        'issue_transitions',
        'issue_properties',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_issue(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'), body: User = ...
):
    """
    Assign issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/attachments',
    description=""" Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).

Note that:

 *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
 *  The name of the multipart/form-data parameter that contains the attachments must be `file`.

The following examples upload a file called *myfile.txt* to the issue *TEST-123*:

#### curl ####

    curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
     -u 'email@example.com:<api_token>'
     -H 'X-Atlassian-Token: no-check'
     --form 'file=@"myfile.txt"'

#### Node.js ####

    // This code sample uses the 'node-fetch' and 'form-data' libraries:
     // https://www.npmjs.com/package/node-fetch
     // https://www.npmjs.com/package/form-data
     const fetch = require('node-fetch');
     const FormData = require('form-data');
     const fs = require('fs');
    
     const filePath = 'myfile.txt';
     const form = new FormData();
     const stats = fs.statSync(filePath);
     const fileSizeInBytes = stats.size;
     const fileStream = fs.createReadStream(filePath);
    
     form.append('file', fileStream, {knownLength: fileSizeInBytes});
    
     fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
         method: 'POST',
         body: form,
         headers: {
             'Authorization': `Basic ${Buffer.from(
                 'email@example.com:'
             ).toString('base64')}`,
             'Accept': 'application/json',
             'X-Atlassian-Token': 'no-check'
         }
     })
         .then(response => {
             console.log(
                 `Response: ${response.status} ${response.statusText}`
             );
             return response.text();
         })
         .then(text => console.log(text))
         .catch(err => console.error(err));

#### Java ####

    // This code sample uses the  'Unirest' library:
     // http://unirest.io/java.html
     HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
             .basicAuth("email@example.com", "")
             .header("Accept", "application/json")
             .header("X-Atlassian-Token", "no-check")
             .field("file", new File("myfile.txt"))
             .asJson();
    
             System.out.println(response.getBody());

#### Python ####

    # This code sample uses the 'requests' library:
     # http://docs.python-requests.org
     import requests
     from requests.auth import HTTPBasicAuth
     import json
    
     url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
    
     auth = HTTPBasicAuth("email@example.com", "")
    
     headers = {
        "Accept": "application/json",
        "X-Atlassian-Token": "no-check"
     }
    
     response = requests.request(
        "POST",
        url,
        headers = headers,
        auth = auth,
        files = {
             "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
        }
     )
    
     print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))

#### PHP ####

    // This code sample uses the 'Unirest' library:
     // http://unirest.io/php.html
     Unirest\Request::auth('email@example.com', '');
    
     $headers = array(
       'Accept' => 'application/json',
       'X-Atlassian-Token' => 'no-check'
     );
    
     $parameters = array(
       'file' => File::add('myfile.txt')
     );
    
     $response = Unirest\Request::post(
       'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
       $headers,
       $parameters
     );
    
     var_dump($response)

#### Forge ####

    // This sample uses Atlassian Forge and the `form-data` library.
     // https://developer.atlassian.com/platform/forge/
     // https://www.npmjs.com/package/form-data
     import api from "@forge/api";
     import FormData from "form-data";
    
     const form = new FormData();
     form.append('file', fileStream, {knownLength: fileSizeInBytes});
    
     const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
         method: 'POST',
         body: form,
         headers: {
             'Accept': 'application/json',
             'X-Atlassian-Token': 'no-check'
         }
     });
    
     console.log(`Response: ${response.status} ${response.statusText}`);
     console.log(await response.json());

Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** 

 *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['attachment_operations', 'attachment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_attachment(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'), file: UploadFile = ...
):
    """
    Add attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/changelog',
    description=""" Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_changelog'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_change_logs(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Get changelogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/changelog/list',
    description=""" Returns changelogs for an issue specified by a list of changelog IDs.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_changelog', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_change_logs_by_ids(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    body: IssueChangelogIds = ...,
):
    """
    Get changelogs by IDs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/comment',
    description=""" Returns all comments for an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Comments are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to. """,
    tags=['comment_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_comments(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(5000, alias='maxResults'),
    order_by: Optional[OrderBy6] = Query(None, alias='orderBy'),
    expand: Optional[str] = None,
):
    """
    Get comments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/comment',
    description=""" Adds a comment to an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['comment_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_comment(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    expand: Optional[str] = None,
    body: Comment = ...,
):
    """
    Add comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
    description=""" Deletes a comment.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_comment(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'), id: str = ...
):
    """
    Delete comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
    description=""" Returns a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_comment(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    id: str = ...,
    expand: Optional[str] = None,
):
    """
    Get comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/comment/{id}',
    description=""" Updates a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. """,
    tags=['comment_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_comment(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    id: str = ...,
    notify_users: Optional[bool] = Query(True, alias='notifyUsers'),
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
    expand: Optional[str] = None,
    body: Comment = ...,
):
    """
    Update comment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/editmeta',
    description=""" Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).

This endpoint will check for these conditions:

1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
5.  Issue has a project, issue type, and status defined.
6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.

Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.

Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:

 *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
 *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue. """,
    tags=['issue_metadata_retrieval', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_edit_issue_meta(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    override_screen_security: Optional[bool] = Query(
        False, alias='overrideScreenSecurity'
    ),
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
):
    """
    Get edit issue metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/notify',
    description=""" Creates an email notification for an issue and adds it to the mail queue.

**[Permissions](#permissions) required:**

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_notifications', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def notify(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'), body: Notification = ...
):
    """
    Send notification for issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/properties',
    description=""" Returns the URLs and keys of an issue's properties.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Property details are only returned where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_property_management', 'issue_properties', 'issue_metadata_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_property_keys(issue_id_or_key: str = Path(..., alias='issueIdOrKey')):
    """
    Get issue property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
    description=""" Deletes an issue's property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_property_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete issue property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
    description=""" Returns the key and value of an issue's property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_property_management', 'issue_properties', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get issue property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}',
    description=""" Sets the value of an issue's property. Use this resource to store custom data against an issue.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_property_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_issue_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set issue property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink',
    description=""" Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_remote_issue_link_by_global_id(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    global_id: str = Query(..., alias='globalId'),
):
    """
    Delete remote issue link by global ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink',
    description=""" Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_remote_issue_links(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    global_id: Optional[str] = Query(None, alias='globalId'),
):
    """
    Get remote issue links
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink',
    description=""" Creates or updates a remote issue link for an issue.

If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_or_update_remote_issue_link(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    body: RemoteIssueLinkRequest = ...,
):
    """
    Create or update remote issue link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
    description=""" Deletes a remote issue link from an issue.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_remote_issue_link_by_id(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    link_id: str = Path(..., alias='linkId'),
):
    """
    Delete remote issue link by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
    description=""" Returns a remote issue link for an issue.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_remote_issue_link_by_id(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    link_id: str = Path(..., alias='linkId'),
):
    """
    Get remote issue link by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}',
    description=""" Updates a remote issue link for an issue.

Note: Fields without values in the request are set to null.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['remote_issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_remote_issue_link(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    link_id: str = Path(..., alias='linkId'),
    body: RemoteIssueLinkRequest = ...,
):
    """
    Update remote issue link by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/transitions',
    description=""" Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.

Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.

This operation can be accessed anonymously.

**[Permissions](#permissions) required: A list or transition is returned only when the user has:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions. """,
    tags=['issue_transitions', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_transitions(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    expand: Optional[str] = None,
    transition_id: Optional[str] = Query(None, alias='transitionId'),
    skip_remote_only_condition: Optional[bool] = Query(
        False, alias='skipRemoteOnlyCondition'
    ),
    include_unavailable_transitions: Optional[bool] = Query(
        False, alias='includeUnavailableTransitions'
    ),
    sort_by_ops_bar_and_status: Optional[bool] = Query(
        False, alias='sortByOpsBarAndStatus'
    ),
):
    """
    Get transitions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/transitions',
    description=""" Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.

sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_transitions', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def do_transition(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    body: IssueUpdateDetails = ...,
):
    """
    Transition issue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/votes',
    description=""" Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_voting', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_vote(issue_id_or_key: str = Path(..., alias='issueIdOrKey')):
    """
    Delete vote
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/votes',
    description=""" Returns details about the votes on an issue.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field. """,
    tags=['issue_voting'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_votes(issue_id_or_key: str = Path(..., alias='issueIdOrKey')):
    """
    Get votes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/votes',
    description=""" Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['issue_voting', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_vote(issue_id_or_key: str = Path(..., alias='issueIdOrKey')):
    """
    Add vote
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/watchers',
    description=""" Deletes a user as a watcher of an issue.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. """,
    tags=['issue_watchers_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_watcher(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
):
    """
    Delete watcher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/watchers',
    description=""" Returns the watchers for an issue.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. """,
    tags=['issue_watchers_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_watchers(issue_id_or_key: str = Path(..., alias='issueIdOrKey')):
    """
    Get issue watchers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/watchers',
    description=""" Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. """,
    tags=['issue_watchers_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_watcher(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'), body: str = ...
):
    """
    Add watcher
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/worklog',
    description=""" Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Workloads are only returned where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['worklog_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_worklog(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(5000, alias='maxResults'),
    started_after: Optional[int_aliased] = Query(None, alias='startedAfter'),
    started_before: Optional[int_aliased] = Query(None, alias='startedBefore'),
    expand: Optional[str] = '',
):
    """
    Get issue worklogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issue/{issueIdOrKey}/worklog',
    description=""" Adds a worklog to an issue.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['worklog_management', 'issue_management', 'issue_notifications'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_worklog(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    notify_users: Optional[bool] = Query(True, alias='notifyUsers'),
    adjust_estimate: Optional[AdjustEstimate] = Query('auto', alias='adjustEstimate'),
    new_estimate: Optional[str] = Query(None, alias='newEstimate'),
    reduce_by: Optional[str] = Query(None, alias='reduceBy'),
    expand: Optional[str] = '',
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
    body: Worklog = ...,
):
    """
    Add worklog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
    description=""" Deletes a worklog from an issue.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['worklog_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_worklog(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    id: str = ...,
    notify_users: Optional[bool] = Query(True, alias='notifyUsers'),
    adjust_estimate: Optional[AdjustEstimate] = Query('auto', alias='adjustEstimate'),
    new_estimate: Optional[str] = Query(None, alias='newEstimate'),
    increase_by: Optional[str] = Query(None, alias='increaseBy'),
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
):
    """
    Delete worklog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
    description=""" Returns a worklog.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_worklog(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    id: str = ...,
    expand: Optional[str] = '',
):
    """
    Get worklog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}',
    description=""" Updates a worklog.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['worklog_management', 'issue_management', 'issue_notifications'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_worklog(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    id: str = ...,
    notify_users: Optional[bool] = Query(True, alias='notifyUsers'),
    adjust_estimate: Optional[AdjustEstimate] = Query('auto', alias='adjustEstimate'),
    new_estimate: Optional[str] = Query(None, alias='newEstimate'),
    expand: Optional[str] = '',
    override_editable_flag: Optional[bool] = Query(False, alias='overrideEditableFlag'),
    body: Worklog = ...,
):
    """
    Update worklog
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties',
    description=""" Returns the keys of all properties for a worklog.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_worklog_property_keys(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    worklog_id: str = Path(..., alias='worklogId'),
):
    """
    Get worklog property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
    description=""" Deletes a worklog property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['issue_property_management', 'worklog_management', 'issue_properties'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_worklog_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    worklog_id: str = Path(..., alias='worklogId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete worklog property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
    description=""" Returns the value of a worklog property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['issue_property_management', 'worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_worklog_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    worklog_id: str = Path(..., alias='worklogId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get worklog property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}',
    description=""" Sets the value of a worklog property. Use this operation to store custom data against the worklog.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['issue_property_management', 'worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_worklog_property(
    issue_id_or_key: str = Path(..., alias='issueIdOrKey'),
    worklog_id: str = Path(..., alias='worklogId'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set worklog property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issueLink',
    description=""" Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.

If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
 *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. """,
    tags=['issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def link_issues(body: LinkIssueRequestJsonBean):
    """
    Create issue link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issueLink/{linkId}',
    description=""" Deletes an issue link.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
 *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues. """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_link(link_id: str = Path(..., alias='linkId')):
    """
    Delete issue link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issueLink/{linkId}',
    description=""" Returns an issue link.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues. """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_link(link_id: str = Path(..., alias='linkId')):
    """
    Get issue link
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issueLinkType',
    description=""" Returns a list of all issue link types.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site. """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_link_types():
    """
    Get issue link types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issueLinkType',
    description=""" Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_link_type(body: IssueLinkType):
    """
    Create issue link type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issueLinkType/{issueLinkTypeId}',
    description=""" Deletes an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_link_type(
    issue_link_type_id: str = Path(..., alias='issueLinkTypeId')
):
    """
    Delete issue link type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issueLinkType/{issueLinkTypeId}',
    description=""" Returns an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site. """,
    tags=['issue_link_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_link_type(issue_link_type_id: str = Path(..., alias='issueLinkTypeId')):
    """
    Get issue link type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issueLinkType/{issueLinkTypeId}',
    description=""" Updates an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_link_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_issue_link_type(
    issue_link_type_id: str = Path(..., alias='issueLinkTypeId'),
    body: IssueLinkType = ...,
):
    """
    Update issue link type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuesecurityschemes',
    description=""" Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_security_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_security_schemes():
    """
    Get issue security schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuesecurityschemes/{id}',
    description=""" Returns an issue security scheme along with its security levels.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme. """,
    tags=['issue_security_management', 'project_security_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_security_scheme(id: int_aliased):
    """
    Get issue security scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members',
    description=""" Returns issue security level members.

Only issue security level members in context of classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_security_management', 'issue_management', 'issue_metadata_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_security_level_members(
    issue_security_scheme_id: int_aliased = Path(..., alias='issueSecuritySchemeId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    issue_security_level_id: Optional[IssueSecurityLevelId] = Query(
        None, alias='issueSecurityLevelId'
    ),
    expand: Optional[str] = None,
):
    """
    Get issue security level members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype',
    description=""" Returns all issue types.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issue types are only returned as follows:

 *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
 *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned. """,
    tags=['issue_type_management', 'issue_metadata_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_all_types():
    """
    Get all issue types for user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issuetype',
    description=""" Creates an issue type and adds it to the default issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_type(body: IssueTypeCreateBean):
    """
    Create issue type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype/project',
    description=""" Returns issue types for a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_types_for_project(
    project_id: int_aliased = Query(..., alias='projectId'),
    level: Optional[int_aliased] = None,
):
    """
    Get issue types for project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issuetype/{id}',
    description=""" Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_type(
    id: str,
    alternative_issue_type_id: Optional[str] = Query(
        None, alias='alternativeIssueTypeId'
    ),
):
    """
    Delete issue type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype/{id}',
    description=""" Returns an issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management', 'issue_metadata_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type(id: str):
    """
    Get issue type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetype/{id}',
    description=""" Updates the issue type.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_issue_type(id: str, body: IssueTypeUpdateBean = ...):
    """
    Update issue type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype/{id}/alternatives',
    description=""" Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['issue_type_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_alternative_issue_types(id: str):
    """
    Get alternative issue types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issuetype/{id}/avatar2',
    description=""" Loads an avatar for the issue type.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management', 'avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_type_avatar(
    id: str,
    x: Optional[int_aliased] = 0,
    y: Optional[int_aliased] = 0,
    size: int_aliased = ...,
):
    """
    Load issue type avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype/{issueTypeId}/properties',
    description=""" Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse. """,
    tags=['issue_type_management', 'issue_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_property_keys(issue_type_id: str = Path(..., alias='issueTypeId')):
    """
    Get issue type property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
    description=""" Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_property_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_type_property(
    issue_type_id: str = Path(..., alias='issueTypeId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete issue type property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
    description=""" Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse. """,
    tags=['issue_property_management', 'issue_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_property(
    issue_type_id: str = Path(..., alias='issueTypeId'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get issue type property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}',
    description=""" Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_property_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_issue_type_property(
    issue_type_id: str = Path(..., alias='issueTypeId'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set issue type property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescheme',
    description=""" Returns a [paginated](#pagination) list of issue type schemes.

Only issue type schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_issue_type_schemes(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    id: Optional[Id3] = None,
    order_by: Optional[OrderBy8] = Query('id', alias='orderBy'),
    expand: Optional[str] = '',
    query_string: Optional[str] = Query('', alias='queryString'),
):
    """
    Get all issue type schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issuetypescheme',
    description=""" Creates an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_type_scheme(body: IssueTypeSchemeDetails):
    """
    Create issue type scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescheme/mapping',
    description=""" Returns a [paginated](#pagination) list of issue type scheme items.

Only issue type scheme items used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_schemes_mapping(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    issue_type_scheme_id: Optional[IssueTypeSchemeId] = Query(
        None, alias='issueTypeSchemeId'
    ),
):
    """
    Get issue type scheme items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescheme/project',
    description=""" Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.

Only issue type schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_scheme_for_projects(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    project_id: ProjectId3 = Query(..., alias='projectId'),
):
    """
    Get issue type schemes for projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescheme/project',
    description=""" Assigns an issue type scheme to a project.

If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.

Issue type schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'project_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_issue_type_scheme_to_project(body: IssueTypeSchemeProjectAssociation):
    """
    Assign issue type scheme to project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issuetypescheme/{issueTypeSchemeId}',
    description=""" Deletes an issue type scheme.

Only issue type schemes used in classic projects can be deleted.

Any projects assigned to the scheme are reassigned to the default issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_type_scheme(
    issue_type_scheme_id: int_aliased = Path(..., alias='issueTypeSchemeId')
):
    """
    Delete issue type scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescheme/{issueTypeSchemeId}',
    description=""" Updates an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_issue_type_scheme(
    issue_type_scheme_id: int_aliased = Path(..., alias='issueTypeSchemeId'),
    body: IssueTypeSchemeUpdateDetails = ...,
):
    """
    Update issue type scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype',
    description=""" Adds issue types to an issue type scheme.

The added issue types are appended to the issue types list.

If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_issue_types_to_issue_type_scheme(
    issue_type_scheme_id: int_aliased = Path(..., alias='issueTypeSchemeId'),
    body: IssueTypeIds = ...,
):
    """
    Add issue types to issue type scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move',
    description=""" Changes the order of issue types in an issue type scheme.

The request body parameters must meet the following requirements:

 *  all of the issue types must belong to the issue type scheme.
 *  either `after` or `position` must be provided.
 *  the issue type in `after` must not be in the issue type list.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_management', 'issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def reorder_issue_types_in_issue_type_scheme(
    issue_type_scheme_id: int_aliased = Path(..., alias='issueTypeSchemeId'),
    body: OrderOfIssueTypes = ...,
):
    """
    Change order of issue types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}',
    description=""" Removes an issue type from an issue type scheme.

This operation cannot remove:

 *  any issue type used by issues.
 *  any issue types from the default issue type scheme.
 *  the last standard issue type from an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_issue_type_from_issue_type_scheme(
    issue_type_scheme_id: int_aliased = Path(..., alias='issueTypeSchemeId'),
    issue_type_id: int_aliased = Path(..., alias='issueTypeId'),
):
    """
    Remove issue type from issue type scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescreenscheme',
    description=""" Returns a [paginated](#pagination) list of issue type screen schemes.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management', 'issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_screen_schemes(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    id: Optional[Id3] = None,
    query_string: Optional[str] = Query('', alias='queryString'),
    order_by: Optional[OrderBy8] = Query('id', alias='orderBy'),
    expand: Optional[str] = '',
):
    """
    Get issue type screen schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issuetypescreenscheme',
    description=""" Creates an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_issue_type_screen_scheme(body: IssueTypeScreenSchemeDetails):
    """
    Create issue type screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescreenscheme/mapping',
    description=""" Returns a [paginated](#pagination) list of issue type screen scheme items.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_screen_scheme_mappings(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    issue_type_screen_scheme_id: Optional[IssueTypeScreenSchemeId1] = Query(
        None, alias='issueTypeScreenSchemeId'
    ),
):
    """
    Get issue type screen scheme items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescreenscheme/project',
    description=""" Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'issue_type_screen_scheme_management',
        'issue_type_management',
        'project_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_type_screen_scheme_project_associations(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    project_id: ProjectId3 = Query(..., alias='projectId'),
):
    """
    Get issue type screen schemes for projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescreenscheme/project',
    description=""" Assigns an issue type screen scheme to a project.

Issue type screen schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'issue_type_management',
        'issue_type_screen_scheme_management',
        'project_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_issue_type_screen_scheme_to_project(
    body: IssueTypeScreenSchemeProjectAssociation,
):
    """
    Assign issue type screen scheme to project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}',
    description=""" Deletes an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management', 'issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_issue_type_screen_scheme(
    issue_type_screen_scheme_id: str = Path(..., alias='issueTypeScreenSchemeId')
):
    """
    Delete issue type screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}',
    description=""" Updates an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management', 'issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_issue_type_screen_scheme(
    issue_type_screen_scheme_id: str = Path(..., alias='issueTypeScreenSchemeId'),
    body: IssueTypeScreenSchemeUpdateDetails = ...,
):
    """
    Update issue type screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping',
    description=""" Appends issue type to screen scheme mappings to an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_scheme_management', 'issue_type_screen_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def append_mappings_for_issue_type_screen_scheme(
    issue_type_screen_scheme_id: str = Path(..., alias='issueTypeScreenSchemeId'),
    body: IssueTypeScreenSchemeMappingDetails = ...,
):
    """
    Append mappings to issue type screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default',
    description=""" Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'issue_type_screen_scheme_management',
        'issue_type_management',
        'issue_type_scheme_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_default_screen_scheme(
    issue_type_screen_scheme_id: str = Path(..., alias='issueTypeScreenSchemeId'),
    body: UpdateDefaultScreenScheme = ...,
):
    """
    Update issue type screen scheme default screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove',
    description=""" Removes issue type to screen scheme mappings from an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'issue_type_screen_scheme_management',
        'issue_type_scheme_management',
        'issue_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_mappings_from_issue_type_screen_scheme(
    issue_type_screen_scheme_id: str = Path(..., alias='issueTypeScreenSchemeId'),
    body: IssueTypeIds = ...,
):
    """
    Remove mappings from issue type screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project',
    description=""" Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.

Only company-managed projects associated with an issue type screen scheme are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management', 'issue_type_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_projects_for_issue_type_screen_scheme(
    issue_type_screen_scheme_id: int_aliased = Path(
        ..., alias='issueTypeScreenSchemeId'
    ),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    query: Optional[str] = '',
):
    """
    Get issue type screen scheme projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/jql/autocompletedata',
    description=""" Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.

To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['custom_field_management', 'field_configuration_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_auto_complete():
    """
    Get field reference data (GET)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/autocompletedata',
    description=""" Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.

This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.

It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.

**[Permissions](#permissions) required:** None. """,
    tags=['field_auto_complete', 'custom_field_option_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_auto_complete_post(body: SearchAutoCompleteFilter):
    """
    Get field reference data (POST)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/jql/autocompletedata/suggestions',
    description=""" Returns the JQL search auto complete suggestions for a field.

Suggestions can be obtained by providing:

 *  `fieldName` to get a list of all values for the field.
 *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
 *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
 *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['field_auto_complete', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_field_auto_complete_for_query_string(
    field_name: Optional[str] = Query(None, alias='fieldName'),
    field_value: Optional[str] = Query(None, alias='fieldValue'),
    predicate_name: Optional[str] = Query(None, alias='predicateName'),
    predicate_value: Optional[str] = Query(None, alias='predicateValue'),
):
    """
    Get field auto complete suggestions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/jql/function/computation',
    tags=['precomputation_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_precomputations(
    function_key: Optional[FunctionKey] = Query(None, alias='functionKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(5000, alias='maxResults'),
    order_by: Optional[str] = Query(None, alias='orderBy'),
    filter: Optional[str] = None,
):
    """
    Get precomputation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/function/computation',
    tags=['precomputation_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_precomputations(body: JqlFunctionPrecomputationUpdateRequestBean):
    """
    Update precomputations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/match',
    description=""" Checks whether one or more issues would be returned by one or more JQL queries.

**[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['jql_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def match_issues(body: IssuesAndJQLQueries):
    """
    Check issues against JQL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/parse',
    description=""" Parses and validates JQL queries.

Validation is performed in context of the current user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['jql_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def parse_jql_queries(
    validation: Optional[Validation] = 'strict', body: JqlQueriesToParse = ...
):
    """
    Parse JQL query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/pdcleaner',
    description=""" Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.

You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['jql_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def migrate_queries(body: JQLPersonalDataMigrationRequest):
    """
    Convert user identifiers to account IDs in JQL queries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/jql/sanitize',
    description=""" Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.

For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.

Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).

Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['jql_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def sanitise_jql_queries(body: JqlQueriesToSanitize):
    """
    Sanitize JQL queries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/label',
    description=""" Returns a [paginated](#pagination) list of labels. """,
    tags=['label_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_labels(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(1000, alias='maxResults'),
):
    """
    Get all labels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/license/approximateLicenseCount',
    description=""" Returns the total approximate user account across all jira licenced application keys. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['license_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_approximate_license_count():
    """
    Get approximate license count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/license/approximateLicenseCount/product/{applicationKey}',
    description=""" Returns the total approximate user account for a specific `jira licence application key`. Please note this information is cached with a 7-day lifecycle and could be stale at the time of call.

#### Application Key ####

An application key represents a specific version of Jira. See \{@link ApplicationKey\} for details

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['license_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_approximate_application_license_count(
    application_key: str = Path(..., alias='applicationKey')
):
    """
    Get approximate application license count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/mypermissions',
    description=""" Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.

The user is reported as having a project permission:

 *  in the global context, if the user has the project permission in any project.
 *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
 *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
 *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.

This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.

Global permissions are unaffected by context.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['user_permissions_management', 'project_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_my_permissions(
    project_key: Optional[str] = Query(None, alias='projectKey'),
    project_id: Optional[str] = Query(None, alias='projectId'),
    issue_key: Optional[str] = Query(None, alias='issueKey'),
    issue_id: Optional[str] = Query(None, alias='issueId'),
    permissions: Optional[str] = None,
    project_uuid: Optional[str] = Query(None, alias='projectUuid'),
    project_configuration_uuid: Optional[str] = Query(
        None, alias='projectConfigurationUuid'
    ),
    comment_id: Optional[str] = Query(None, alias='commentId'),
):
    """
    Get my permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/mypreferences',
    description=""" Deletes a preference of the user, which restores the default value of system defined settings.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
 *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_preference(key: str):
    """
    Delete preference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/mypreferences',
    description=""" Returns the value of a preference of the current user.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
 *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_preference(key: str):
    """
    Get preference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/mypreferences',
    description=""" Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:

 *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
 *  *user.notify.own.changes* Whether the user gets notified of their own changes. Defaults to `false`.
 *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
 *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
 *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
 *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_preferences_management', 'application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_preference(key: str, body: str = ...):
    """
    Set preference
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/mypreferences/locale',
    description=""" Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.

Deletes the locale of the user, which restores the default setting.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['locale_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_locale():
    """
    Delete locale
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/mypreferences/locale',
    description=""" Returns the locale for the user.

If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['locale_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_locale():
    """
    Get locale
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/mypreferences/locale',
    description=""" Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.

Sets the locale of the user. The locale must be one supported by the instance of Jira.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['locale_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_locale(body: Locale):
    """
    Set locale
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/myself',
    description=""" Returns details for the current user.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_management', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_current_user(expand: Optional[str] = None):
    """
    Get current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/notificationscheme',
    description=""" Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.

*Note that you should allow for events without recipients to appear in responses.*

**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned. """,
    tags=['notification_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_notification_schemes(
    start_at: Optional[str] = Query('0', alias='startAt'),
    max_results: Optional[str] = Query('50', alias='maxResults'),
    id: Optional[Id8] = None,
    project_id: Optional[ProjectId5] = Query(None, alias='projectId'),
    only_default: Optional[bool] = Query(False, alias='onlyDefault'),
    expand: Optional[str] = None,
):
    """
    Get notification schemes paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/notificationscheme',
    description=""" Creates a notification scheme with notifications. You can create up to 1000 notifications per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['notification_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_notification_scheme(body: CreateNotificationSchemeDetails):
    """
    Create notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/notificationscheme/project',
    description=""" Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['notification_scheme_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_notification_scheme_to_project_mappings(
    start_at: Optional[str] = Query('0', alias='startAt'),
    max_results: Optional[str] = Query('50', alias='maxResults'),
    notification_scheme_id: Optional[NotificationSchemeId1] = Query(
        None, alias='notificationSchemeId'
    ),
    project_id: Optional[ProjectId5] = Query(None, alias='projectId'),
):
    """
    Get projects using notification schemes paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/notificationscheme/{id}',
    description=""" Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.

**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme. """,
    tags=['notification_scheme_management', 'issue_notifications'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_notification_scheme(id: int_aliased, expand: Optional[str] = None):
    """
    Get notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/notificationscheme/{id}',
    description=""" Updates a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['notification_scheme_management', 'issue_notifications'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_notification_scheme(id: str, body: UpdateNotificationSchemeDetails = ...):
    """
    Update notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/notificationscheme/{id}/notification',
    description=""" Adds notifications to a notification scheme. You can add up to 1000 notifications per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_notifications', 'notification_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_notifications(id: str, body: AddNotificationsDetails = ...):
    """
    Add notifications to notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/notificationscheme/{notificationSchemeId}',
    description=""" Deletes a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['notification_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_notification_scheme(
    notification_scheme_id: str = Path(..., alias='notificationSchemeId')
):
    """
    Delete notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}',
    description=""" Removes a notification from a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['notification_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_notification_from_notification_scheme(
    notification_scheme_id: str = Path(..., alias='notificationSchemeId'),
    notification_id: str = Path(..., alias='notificationId'),
):
    """
    Remove notification from notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/permissions',
    description=""" Returns all permissions, including:

 *  global permissions.
 *  project permissions.
 *  global permissions added by plugins.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_permissions_management', 'permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_permissions():
    """
    Get all permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/permissions/check',
    description=""" Returns:

 *  for a list of global permissions, the global permissions granted to a user.
 *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.

If no account ID is provided, the operation returns details for the logged in user.

Note that:

 *  Invalid project and issue IDs are ignored.
 *  A maximum of 1000 projects and 1000 issues can be checked.
 *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
 *  Empty strings in `projectPermissions.permissions` are ignored.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser. """,
    tags=[
        'bulk_issue_operations',
        'share_permission_management',
        'user_permissions_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_bulk_permissions(body: BulkPermissionsRequestBean):
    """
    Get bulk permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/permissions/project',
    description=""" Returns all the projects where the user is granted a list of project permissions.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=[
        'user_permissions_management',
        'project_management',
        'permission_scheme_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_permitted_projects(body: PermissionsKeysBean):
    """
    Get permitted projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/permissionscheme',
    description=""" Returns all permission schemes.

### About permission schemes and grants ###

A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.

#### Holder object ####

The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`. The `holder` object is defined by the following properties:

 *  `type` Identifies the user or group (see the list of types below).
 *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
 *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`

The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):

 *  `anyone` Grant for anonymous users.
 *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
 *  `assignee` Grant for the user currently assigned to an issue.
 *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
 *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
 *  `projectLead` Grant for a project lead.
 *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
 *  `reporter` Grant for the user who reported the issue.
 *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
 *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
 *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).

#### Built-in permissions ####

The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.

**Project permissions**

 *  `ADMINISTER_PROJECTS`
 *  `BROWSE_PROJECTS`
 *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
 *  `SERVICEDESK_AGENT` (Jira Service Desk only)
 *  `VIEW_DEV_TOOLS` (Jira Software only)
 *  `VIEW_READONLY_WORKFLOW`

**Issue permissions**

 *  `ASSIGNABLE_USER`
 *  `ASSIGN_ISSUES`
 *  `CLOSE_ISSUES`
 *  `CREATE_ISSUES`
 *  `DELETE_ISSUES`
 *  `EDIT_ISSUES`
 *  `LINK_ISSUES`
 *  `MODIFY_REPORTER`
 *  `MOVE_ISSUES`
 *  `RESOLVE_ISSUES`
 *  `SCHEDULE_ISSUES`
 *  `SET_ISSUE_SECURITY`
 *  `TRANSITION_ISSUES`

**Voters and watchers permissions**

 *  `MANAGE_WATCHERS`
 *  `VIEW_VOTERS_AND_WATCHERS`

**Comments permissions**

 *  `ADD_COMMENTS`
 *  `DELETE_ALL_COMMENTS`
 *  `DELETE_OWN_COMMENTS`
 *  `EDIT_ALL_COMMENTS`
 *  `EDIT_OWN_COMMENTS`

**Attachments permissions**

 *  `CREATE_ATTACHMENTS`
 *  `DELETE_ALL_ATTACHMENTS`
 *  `DELETE_OWN_ATTACHMENTS`

**Time tracking permissions**

 *  `DELETE_ALL_WORKLOGS`
 *  `DELETE_OWN_WORKLOGS`
 *  `EDIT_ALL_WORKLOGS`
 *  `EDIT_OWN_WORKLOGS`
 *  `WORK_ON_ISSUES`

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_permission_schemes(expand: Optional[str] = None):
    """
    Get all permission schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/permissionscheme',
    description=""" Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_permission_scheme(
    expand: Optional[str] = None, body: PermissionScheme = ...
):
    """
    Create permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/permissionscheme/{schemeId}',
    description=""" Deletes a permission scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_permission_scheme(scheme_id: int_aliased = Path(..., alias='schemeId')):
    """
    Delete permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/permissionscheme/{schemeId}',
    description=""" Returns a permission scheme.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['permission_scheme_management', 'user_permissions_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_permission_scheme(
    scheme_id: int_aliased = Path(..., alias='schemeId'), expand: Optional[str] = None
):
    """
    Get permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/permissionscheme/{schemeId}',
    description=""" Updates a permission scheme. Below are some important things to note when using this resource:

 *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
 *  If you want to update only the name and description, then do not send a permissions list in the request.
 *  Sending an empty list will remove all permission grants from the permission scheme.

If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).

See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_permission_scheme(
    scheme_id: int_aliased = Path(..., alias='schemeId'),
    expand: Optional[str] = None,
    body: PermissionScheme = ...,
):
    """
    Update permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/permissionscheme/{schemeId}/permission',
    description=""" Returns all permission grants for a permission scheme.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_permission_scheme_grants(
    scheme_id: int_aliased = Path(..., alias='schemeId'), expand: Optional[str] = None
):
    """
    Get permission scheme grants
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/permissionscheme/{schemeId}/permission',
    description=""" Creates a permission grant in a permission scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['share_permission_management', 'permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_permission_grant(
    scheme_id: int_aliased = Path(..., alias='schemeId'),
    expand: Optional[str] = None,
    body: PermissionGrant = ...,
):
    """
    Create permission grant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}',
    description=""" Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_permission_scheme_entity(
    scheme_id: int_aliased = Path(..., alias='schemeId'),
    permission_id: int_aliased = Path(..., alias='permissionId'),
):
    """
    Delete permission scheme grant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}',
    description=""" Returns a permission grant.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['permission_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_permission_scheme_grant(
    scheme_id: int_aliased = Path(..., alias='schemeId'),
    permission_id: int_aliased = Path(..., alias='permissionId'),
    expand: Optional[str] = None,
):
    """
    Get permission scheme grant
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/priority',
    description=""" Returns the list of all issue priorities.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_priorities():
    """
    Get priorities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/priority',
    description=""" Creates an issue priority.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_priority(body: CreatePriorityDetails):
    """
    Create priority
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/priority/default',
    description=""" Sets default issue priority.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_default_priority(body: SetDefaultPriorityRequest):
    """
    Set default priority
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/priority/move',
    description=""" Changes the order of issue priorities.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['priority_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def move_priorities(body: ReorderIssuePriorities):
    """
    Move priorities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/priority/search',
    description=""" Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:

 *  a list of priority IDs. Any invalid priority IDs are ignored.
 *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_priorities(
    start_at: Optional[str] = Query('0', alias='startAt'),
    max_results: Optional[str] = Query('50', alias='maxResults'),
    id: Optional[Id8] = None,
    only_default: Optional[bool] = Query(False, alias='onlyDefault'),
):
    """
    Search priorities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/priority/{id}',
    description=""" Deletes an issue priority.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_priority(id: str, replace_with: str = Query(..., alias='replaceWith')):
    """
    Delete priority
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/priority/{id}',
    description=""" Returns an issue priority.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_priority(id: str):
    """
    Get priority
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/priority/{id}',
    description=""" Updates an issue priority.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['priority_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_priority(id: str, body: UpdatePriorityDetails = ...):
    """
    Update priority
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project',
    description=""" Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_projects(
    expand: Optional[str] = None,
    recent: Optional[int_aliased] = None,
    properties: Optional[Properties] = None,
):
    """
    Get all projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project',
    description=""" Creates a project based on a project type template, as shown in the following table:

| Project Type Key | Project Template Key |  
|--|--|  
| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-finance-service-desk` |  
| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
The project types are available according to the installed Jira features as follows:

 *  Jira Core, the default, enables `business` projects.
 *  Jira Service Management enables `service_desk` projects.
 *  Jira Software enables `software` projects.

To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_project(body: CreateProjectDetails):
    """
    Create project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/recent',
    description=""" Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has one of:

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management', 'project_feature_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_recent(expand: Optional[str] = None, properties: Optional[Properties2] = None):
    """
    Get recent projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/search',
    description=""" Returns a [paginated](#pagination) list of projects visible to the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has one of:

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management', 'issue_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_projects(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    order_by: Optional[OrderBy12] = Query('key', alias='orderBy'),
    id: Optional[Id10] = None,
    keys: Optional[Keys] = None,
    query: Optional[str] = None,
    type_key: Optional[str] = Query(None, alias='typeKey'),
    category_id: Optional[int_aliased] = Query(None, alias='categoryId'),
    action: Optional[Action] = 'view',
    expand: Optional[str] = None,
    status: Optional[Status5] = None,
    properties: Optional[Properties2] = None,
    property_query: Optional[str] = Query(None, alias='propertyQuery'),
):
    """
    Get projects paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/type',
    description=""" Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['project_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_project_types():
    """
    Get all project types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/type/accessible',
    description=""" Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license. """,
    tags=['project_type_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_accessible_project_types():
    """
    Get licensed project types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/type/{projectTypeKey}',
    description=""" Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['project_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_type_by_key(
    project_type_key: ProjectTypeKey3 = Path(..., alias='projectTypeKey')
):
    """
    Get project type by key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/type/{projectTypeKey}/accessible',
    description=""" Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['project_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_accessible_project_type_by_key(
    project_type_key: ProjectTypeKey3 = Path(..., alias='projectTypeKey')
):
    """
    Get accessible project type by key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/project/{projectIdOrKey}',
    description=""" Deletes a project.

You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    enable_undo: Optional[bool] = Query(False, alias='enableUndo'),
):
    """
    Delete project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}',
    description=""" Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_management', 'project_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    expand: Optional[str] = None,
    properties: Optional[Properties4] = None,
):
    """
    Get project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}',
    description=""" Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.

All parameters are optional in the body of the request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management', 'project_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_project(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    expand: Optional[str] = None,
    body: UpdateProjectDetails = ...,
):
    """
    Update project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project/{projectIdOrKey}/archive',
    description=""" Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management', 'project_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def archive_project(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Archive project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}/avatar',
    description=""" Sets the avatar displayed for a project.

Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['project_avatar_management', 'avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_project_avatar(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'), body: Avatar = ...
):
    """
    Set project avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/project/{projectIdOrKey}/avatar/{id}',
    description=""" Deletes a custom avatar from a project. Note that system avatars cannot be deleted.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['project_avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project_avatar(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'), id: int_aliased = ...
):
    """
    Delete project avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project/{projectIdOrKey}/avatar2',
    description=""" Loads an avatar for a project.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST `

`--user email@example.com:<api_token> `

`--header 'X-Atlassian-Token: no-check' `

`--header 'Content-Type: image/< image_type>' `

`--data-binary "<@/path/to/file/with/your/avatar>" `

`--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['project_avatar_management', 'avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_project_avatar(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    x: Optional[int_aliased] = 0,
    y: Optional[int_aliased] = 0,
    size: Optional[int_aliased] = None,
):
    """
    Load project avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/avatars',
    description=""" Returns all project avatars, grouped by system and custom avatars.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_project_avatars(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Get all project avatars
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/component',
    description=""" Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_components_paginated(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    order_by: Optional[OrderBy14] = Query(None, alias='orderBy'),
    query: Optional[str] = None,
):
    """
    Get project components paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/components',
    description=""" Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_component_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_components(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Get project components
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project/{projectIdOrKey}/delete',
    description=""" Deletes a project asynchronously.

This operation is:

 *  transactional, that is, if part of the delete fails the project is not deleted.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project_asynchronously(
    project_id_or_key: str = Path(..., alias='projectIdOrKey')
):
    """
    Delete project asynchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/features',
    description=""" Returns the list of features for a project. """,
    tags=['project_feature_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_features_for_project(
    project_id_or_key: str = Path(..., alias='projectIdOrKey')
):
    """
    Get project features
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}/features/{featureKey}',
    description=""" Sets the state of a project feature. """,
    tags=['project_feature_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def toggle_feature_for_project(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    feature_key: str = Path(..., alias='featureKey'),
    body: ProjectFeatureState = ...,
):
    """
    Set project feature state
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/properties',
    description=""" Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_property_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_property_keys(
    project_id_or_key: str = Path(..., alias='projectIdOrKey')
):
    """
    Get project property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
    description=""" Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property. """,
    tags=['project_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project_property(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete project property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
    description=""" Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property. """,
    tags=['project_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_property(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get project property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}',
    description=""" Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created. """,
    tags=['project_property_management', 'application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_project_property(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set project property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project/{projectIdOrKey}/restore',
    description=""" Restores a project that has been archived or placed in the Jira recycle bin.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def restore(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Restore deleted or archived project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/role',
    description=""" Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.

Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_roles(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Get project roles for project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/project/{projectIdOrKey}/role/{id}',
    description=""" Deletes actors from a project role for the project.

To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_actor(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    id: int_aliased = ...,
    user: Optional[str] = None,
    group: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
):
    """
    Delete actors from project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/role/{id}',
    description=""" Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.

To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_role(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    id: int_aliased = ...,
    exclude_inactive_users: Optional[bool] = Query(False, alias='excludeInactiveUsers'),
):
    """
    Get project role for project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/project/{projectIdOrKey}/role/{id}',
    description=""" Adds actors to a project role for the project.

To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_actor_users(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    id: int_aliased = ...,
    body: ActorsMap = ...,
):
    """
    Add actors to project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}/role/{id}',
    description=""" Sets the actors for a project role for a project, replacing all existing actors.

To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'user_group_operations', 'group_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_actors(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    id: int_aliased = ...,
    body: ProjectRoleActorsUpdateBean = ...,
):
    """
    Set actors for project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/roledetails',
    description=""" Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_role_details(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    current_member: Optional[bool] = Query(False, alias='currentMember'),
    exclude_connect_addons: Optional[bool] = Query(False, alias='excludeConnectAddons'),
):
    """
    Get project role details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/statuses',
    description=""" Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_status_and_version_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_statuses(project_id_or_key: str = Path(..., alias='projectIdOrKey')):
    """
    Get all statuses for project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}',
    description=""" Deprecated, this feature is no longer supported and no alternatives are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_type_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_project_type(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    new_project_type_key: NewProjectTypeKey = Path(..., alias='newProjectTypeKey'),
):
    """
    Update project type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/version',
    description=""" Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_status_and_version_management', 'version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_versions_paginated(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    order_by: Optional[OrderBy16] = Query(None, alias='orderBy'),
    query: Optional[str] = None,
    status: Optional[str] = None,
    expand: Optional[str] = None,
):
    """
    Get project versions paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectIdOrKey}/versions',
    description=""" Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_status_and_version_management', 'version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_versions(
    project_id_or_key: str = Path(..., alias='projectIdOrKey'),
    expand: Optional[str] = None,
):
    """
    Get project versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectId}/email',
    description=""" Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['project_email_configuration', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_email(project_id: int_aliased = Path(..., alias='projectId')):
    """
    Get project's sender email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectId}/email',
    description=""" Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).

If `emailAddress` is an empty string, the default email address is restored.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=[
        'project_email_configuration',
        'project_management',
        'project_property_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_project_email(
    project_id: int_aliased = Path(..., alias='projectId'),
    body: ProjectEmailAddress = ...,
):
    """
    Set project's sender email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectId}/hierarchy',
    description=""" Get the issue type hierarchy for a next-gen project.

The issue type hierarchy for a project consists of:

 *  *Epic* at level 1 (optional).
 *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
 *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. """,
    tags=['issue_type_management', 'issue_type_scheme_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_hierarchy(project_id: int_aliased = Path(..., alias='projectId')):
    """
    Get project issue type hierarchy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme',
    description=""" Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['issue_security_management', 'project_security_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_issue_security_scheme(
    project_key_or_id: str = Path(..., alias='projectKeyOrId')
):
    """
    Get project issue security scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectKeyOrId}/notificationscheme',
    description=""" Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. Deprecated, use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) supporting search and pagination.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=['notification_scheme_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_notification_scheme_for_project(
    project_key_or_id: str = Path(..., alias='projectKeyOrId'),
    expand: Optional[str] = None,
):
    """
    Get project notification scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectKeyOrId}/permissionscheme',
    description=""" Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). """,
    tags=[
        'permission_scheme_management',
        'project_management',
        'user_permissions_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_assigned_permission_scheme(
    project_key_or_id: str = Path(..., alias='projectKeyOrId'),
    expand: Optional[str] = None,
):
    """
    Get assigned permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/project/{projectKeyOrId}/permissionscheme',
    description=""" Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) """,
    tags=[
        'permission_scheme_management',
        'project_management',
        'user_permissions_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_permission_scheme(
    project_key_or_id: str = Path(..., alias='projectKeyOrId'),
    expand: Optional[str] = None,
    body: IdBean = ...,
):
    """
    Assign permission scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/project/{projectKeyOrId}/securitylevel',
    description=""" Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project. """,
    tags=['issue_security_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_security_levels_for_project(
    project_key_or_id: str = Path(..., alias='projectKeyOrId')
):
    """
    Get project issue security levels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/projectCategory',
    description=""" Returns all project categories.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['project_category_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_project_categories():
    """
    Get all project categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/projectCategory',
    description=""" Creates a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_category_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_project_category(body: ProjectCategory):
    """
    Create project category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/projectCategory/{id}',
    description=""" Deletes a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_category_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_project_category(id: int_aliased):
    """
    Delete project category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/projectCategory/{id}',
    description=""" Returns a project category.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['project_category_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_category_by_id(id: int_aliased):
    """
    Get project category by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/projectCategory/{id}',
    description=""" Updates a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_category_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_project_category(id: int_aliased, body: ProjectCategory = ...):
    """
    Update project category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/projectvalidate/key',
    description=""" Validates a project key by confirming the key is a valid string and not in use.

**[Permissions](#permissions) required:** None. """,
    tags=['project_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def validate_project_key(key: Optional[str] = None):
    """
    Validate project key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/projectvalidate/validProjectKey',
    description=""" Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.

**[Permissions](#permissions) required:** None. """,
    tags=['project_management', 'project_type_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_valid_project_key(key: Optional[str] = None):
    """
    Get valid project key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/projectvalidate/validProjectName',
    description=""" Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.

**[Permissions](#permissions) required:** None. """,
    tags=['project_management', 'project_type_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_valid_project_name(name: str):
    """
    Get valid project name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/resolution',
    description=""" Returns a list of all issue resolution values.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_resolutions():
    """
    Get resolutions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/resolution',
    description=""" Creates an issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_resolution(body: CreateResolutionDetails):
    """
    Create resolution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/resolution/default',
    description=""" Sets default issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_default_resolution(body: SetDefaultResolutionRequest):
    """
    Set default resolution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/resolution/move',
    description=""" Changes the order of issue resolutions.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def move_resolutions(body: ReorderIssueResolutionsRequest):
    """
    Move resolutions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/resolution/search',
    description=""" Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:

 *  a list of resolutions IDs.
 *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['resolution_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_resolutions(
    start_at: Optional[str] = Query('0', alias='startAt'),
    max_results: Optional[str] = Query('50', alias='maxResults'),
    id: Optional[Id11] = None,
    only_default: Optional[bool] = Query(False, alias='onlyDefault'),
):
    """
    Search resolutions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/resolution/{id}',
    description=""" Deletes an issue resolution.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_resolution(id: str, replace_with: str = Query(..., alias='replaceWith')):
    """
    Delete resolution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/resolution/{id}',
    description=""" Returns an issue resolution value.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_resolution(id: str):
    """
    Get resolution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/resolution/{id}',
    description=""" Updates an issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['resolution_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_resolution(id: str, body: UpdateResolutionDetails = ...):
    """
    Update resolution
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/role',
    description=""" Gets a list of all project roles, complete with project role details and default actors.

### About project roles ###

[Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).

Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.

#### Members and actors ####

In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.

Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:

 *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
 *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_project_roles():
    """
    Get all project roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/role',
    description=""" Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.

*Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_project_role(body: CreateUpdateRoleRequestBean):
    """
    Create project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/role/{id}',
    description=""" Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project_role(id: int_aliased, swap: Optional[int_aliased] = None):
    """
    Delete project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/role/{id}',
    description=""" Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_role_by_id(id: int_aliased):
    """
    Get project role by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/role/{id}',
    description=""" Updates either the project role's name or its description.

You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def partial_update_project_role(
    id: int_aliased, body: CreateUpdateRoleRequestBean = ...
):
    """
    Partial update project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/role/{id}',
    description=""" Updates the project role's name and description. You must include both a name and a description in the request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'project_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fully_update_project_role(id: int_aliased, body: CreateUpdateRoleRequestBean = ...):
    """
    Fully update project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/role/{id}/actors',
    description=""" Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.

Changing a project role's default actors does not affect project role members for projects already created.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management', 'group_management', 'user_group_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_project_role_actors_from_role(
    id: int_aliased,
    user: Optional[str] = None,
    group_id: Optional[str] = Query(None, alias='groupId'),
    group: Optional[str] = None,
):
    """
    Delete default actors from project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/role/{id}/actors',
    description=""" Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_project_role_actors_for_role(id: int_aliased):
    """
    Get default actors for project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/role/{id}/actors',
    description=""" Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.

Changing a project role's default actors does not affect project role members for projects already created.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['project_role_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_project_role_actors_to_role(id: int_aliased, body: ActorInputBean = ...):
    """
    Add default actors to project role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/screens',
    description=""" Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_screens(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
    id: Optional[Id12] = None,
    query_string: Optional[str] = Query('', alias='queryString'),
    scope: Optional[Scope2] = None,
    order_by: Optional[OrderBy18] = Query(None, alias='orderBy'),
):
    """
    Get screens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens',
    description=""" Creates a screen with a default field tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_screen(body: ScreenDetails):
    """
    Create screen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens/addToDefault/{fieldId}',
    description=""" Adds a field to the default tab of the default screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'custom_field_management',
        'field_configuration_management',
        'screen_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_field_to_default_screen(field_id: str = Path(..., alias='fieldId')):
    """
    Add field to default screen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/screens/{screenId}',
    description=""" Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.

Only screens used in classic projects can be deleted. """,
    tags=['screen_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_screen(screen_id: int_aliased = Path(..., alias='screenId')):
    """
    Delete screen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/screens/{screenId}',
    description=""" Updates a screen. Only screens used in classic projects can be updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_screen(
    screen_id: int_aliased = Path(..., alias='screenId'),
    body: UpdateScreenDetails = ...,
):
    """
    Update screen
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/screens/{screenId}/availableFields',
    description=""" Returns the fields that can be added to a tab on a screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_available_screen_fields(screen_id: int_aliased = Path(..., alias='screenId')):
    """
    Get available screen fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/screens/{screenId}/tabs',
    description=""" Returns the list of tabs for a screen.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme. """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_screen_tabs(
    screen_id: int_aliased = Path(..., alias='screenId'),
    project_key: Optional[str] = Query(None, alias='projectKey'),
):
    """
    Get all screen tabs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens/{screenId}/tabs',
    description=""" Creates a tab for a screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_screen_tab(
    screen_id: int_aliased = Path(..., alias='screenId'), body: ScreenableTab = ...
):
    """
    Create screen tab
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}',
    description=""" Deletes a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_screen_tab(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
):
    """
    Delete screen tab
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}',
    description=""" Updates the name of a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def rename_screen_tab(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    body: ScreenableTab = ...,
):
    """
    Update screen tab
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields',
    description=""" Returns all fields for a screen tab.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme. """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_screen_tab_fields(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    project_key: Optional[str] = Query(None, alias='projectKey'),
):
    """
    Get all screen tab fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields',
    description=""" Adds a field to a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management', 'custom_field_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_screen_tab_field(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    body: AddFieldBean = ...,
):
    """
    Add screen tab field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}',
    description=""" Removes a field from a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def remove_screen_tab_field(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    id: str = ...,
):
    """
    Remove screen tab field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move',
    description=""" Moves a screen tab field.

If `after` and `position` are provided in the request, `position` is ignored.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def move_screen_tab_field(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    id: str = ...,
    body: MoveFieldBean = ...,
):
    """
    Move screen tab field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}',
    description=""" Moves a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'screen_tab_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def move_screen_tab(
    screen_id: int_aliased = Path(..., alias='screenId'),
    tab_id: int_aliased = Path(..., alias='tabId'),
    pos: int_aliased = ...,
):
    """
    Move screen tab
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/screenscheme',
    description=""" Returns a [paginated](#pagination) list of screen schemes.

Only screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_screen_schemes(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(25, alias='maxResults'),
    id: Optional[Id12] = None,
    expand: Optional[str] = '',
    query_string: Optional[str] = Query('', alias='queryString'),
    order_by: Optional[OrderBy18] = Query(None, alias='orderBy'),
):
    """
    Get screen schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/screenscheme',
    description=""" Creates a screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'issue_type_screen_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_screen_scheme(body: ScreenSchemeDetails):
    """
    Create screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/screenscheme/{screenSchemeId}',
    description=""" Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.

Only screens schemes used in classic projects can be deleted.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['screen_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_screen_scheme(screen_scheme_id: str = Path(..., alias='screenSchemeId')):
    """
    Delete screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/screenscheme/{screenSchemeId}',
    description=""" Updates a screen scheme. Only screen schemes used in classic projects can be updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['issue_type_screen_scheme_management', 'screen_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_screen_scheme(
    screen_scheme_id: str = Path(..., alias='screenSchemeId'),
    body: UpdateScreenSchemeDetails = ...,
):
    """
    Update screen scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/search',
    description=""" Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).

If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['jql_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_for_issues_using_jql(
    jql: Optional[str] = None,
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    validate_query: Optional[ValidateQuery] = Query('strict', alias='validateQuery'),
    fields: Optional[Fields1] = None,
    expand: Optional[str] = None,
    properties: Optional[Properties4] = None,
    fields_by_keys: Optional[bool] = Query(False, alias='fieldsByKeys'),
):
    """
    Search for issues using JQL (GET)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/search',
    description=""" Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).

There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. """,
    tags=['jql_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_for_issues_using_jql_post(body: SearchRequestBean):
    """
    Search for issues using JQL (POST)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/securitylevel/{id}',
    description=""" Returns details of an issue security level.

Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['issue_security_management', 'issue_search_and_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_issue_security_level(id: str):
    """
    Get issue security level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/serverInfo',
    description=""" Returns information about the Jira instance.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_server_info():
    """
    Get Jira instance info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/settings/columns',
    description=""" Returns the default issue navigator columns.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_info_retrieval', 'user_columns_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_issue_navigator_default_columns():
    """
    Get issue navigator default columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/settings/columns',
    description=""" Sets the default issue navigator columns.

The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`

If no column details are sent, then all default columns are removed.

A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_columns_management', 'column_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_issue_navigator_default_columns(file: UploadFile):
    """
    Set issue navigator default columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/status',
    description=""" Returns a list of all statuses associated with active workflows.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['status_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_statuses():
    """
    Get all statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/status/{idOrName}',
    description=""" Returns a status. The status must be associated with an active workflow to be returned.

If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.

This operation can be accessed anonymously.

[Permissions](#permissions) required: None. """,
    tags=['application_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_status(id_or_name: str = Path(..., alias='idOrName')):
    """
    Get status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/statuscategory',
    description=""" Returns a list of all status categories.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['status_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_status_categories():
    """
    Get all status categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/statuscategory/{idOrKey}',
    description=""" Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['status_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_status_category(id_or_key: str = Path(..., alias='idOrKey')):
    """
    Get status category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/statuses',
    description=""" Deletes statuses by ID.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg) """,
    tags=['status_management', 'bulk_issue_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_statuses_by_id(id: Optional[Id14] = None):
    """
    Bulk delete Statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/statuses',
    description=""" Returns a list of the statuses specified by one or more status IDs.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg) """,
    tags=['bulk_update_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_statuses_by_id(expand: Optional[str] = None, id: Optional[Id14] = None):
    """
    Bulk get statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/statuses',
    description=""" Creates statuses for a global or project scope.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg) """,
    tags=['status_management', 'bulk_issue_operations', 'bulk_update_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_statuses(body: StatusCreateRequest):
    """
    Bulk create statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/statuses',
    description=""" Updates statuses by ID.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg) """,
    tags=['bulk_update_operations', 'status_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_statuses(body: StatusUpdateRequest):
    """
    Bulk update statuses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/statuses/search',
    description=""" Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg) """,
    tags=['issue_search_and_management', 'status_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search(
    expand: Optional[str] = None,
    project_id: Optional[str] = Query(None, alias='projectId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(200, alias='maxResults'),
    search_string: Optional[constr(max_length=255)] = Query(None, alias='searchString'),
    status_category: Optional[str] = Query(None, alias='statusCategory'),
):
    """
    Search statuses paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/task/{taskId}',
    description=""" Returns the status of a [long-running asynchronous task](#async).

When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.

**[Permissions](#permissions) required:** either of:

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  Creator of the task. """,
    tags=['task_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_task(task_id: str = Path(..., alias='taskId')):
    """
    Get task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/task/{taskId}/cancel',
    description=""" Cancels a task.

**[Permissions](#permissions) required:** either of:

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  Creator of the task. """,
    tags=['task_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def cancel_task(task_id: str = Path(..., alias='taskId')):
    """
    Cancel task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/uiModifications',
    description=""" Gets UI modifications. UI modifications can only be retrieved by Forge apps.

**[Permissions](#permissions) required:** None. """,
    tags=['ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_ui_modifications(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    expand: Optional[str] = None,
):
    """
    Get UI modifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/uiModifications',
    description=""" Creates a UI modification. UI modification can only be created by Forge apps.

Each app can define up to 100 UI modifications. Each UI modification can define up to 1000 contexts.

**[Permissions](#permissions) required:**

 *  *None* if the UI modification is created without contexts.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts. """,
    tags=['ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_ui_modification(body: CreateUiModificationDetails):
    """
    Create UI modification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/uiModifications/{uiModificationId}',
    description=""" Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.

**[Permissions](#permissions) required:** None. """,
    tags=['ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_ui_modification(
    ui_modification_id: str = Path(..., alias='uiModificationId')
):
    """
    Delete UI modification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/uiModifications/{uiModificationId}',
    description=""" Updates a UI modification. UI modification can only be updated by Forge apps.

Each UI modification can define up to 1000 contexts.

**[Permissions](#permissions) required:**

 *  *None* if the UI modification is created without contexts.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts. """,
    tags=['ui_modification_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_ui_modification(
    ui_modification_id: str = Path(..., alias='uiModificationId'),
    body: UpdateUiModificationDetails = ...,
):
    """
    Update UI modification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}',
    description=""" Returns the system and custom avatars for a project or issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
 *  for system avatars, none. """,
    tags=['avatar_management', 'issue_type_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_avatars(type: Type16, entity_id: str = Path(..., alias='entityId')):
    """
    Get avatars
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}',
    description=""" Loads a custom avatar for a project or issue type.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST `

`--user email@example.com:<api_token> `

`--header 'X-Atlassian-Token: no-check' `

`--header 'Content-Type: image/< image_type>' `

`--data-binary "<@/path/to/file/with/your/avatar>" `

`--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar use:

 *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
 *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'avatar_management',
        'project_avatar_management',
        'user_preferences_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def store_avatar(
    type: Type16,
    entity_id: str = Path(..., alias='entityId'),
    x: Optional[int_aliased] = 0,
    y: Optional[int_aliased] = 0,
    size: int_aliased = ...,
):
    """
    Load avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}',
    description=""" Deletes an avatar from a project or issue type.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_avatar(
    type: Type16,
    owning_object_id: str = Path(..., alias='owningObjectId'),
    id: int_aliased = ...,
):
    """
    Delete avatar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/universal_avatar/view/type/{type}',
    description=""" Returns the default project or issue type avatar image.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_avatar_image_by_type(
    type: Type19, size: Optional[Size] = None, format: Optional[Format] = None
):
    """
    Get avatar image by type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}',
    description=""" Returns a project or issue type avatar image by ID.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  For system avatars, none.
 *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in. """,
    tags=['avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_avatar_image_by_i_d(
    type: Type19,
    id: int_aliased = ...,
    size: Optional[Size] = None,
    format: Optional[Format] = None,
):
    """
    Get avatar image by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}',
    description=""" Returns the avatar image for a project or issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  For system avatars, none.
 *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in. """,
    tags=['avatar_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_avatar_image_by_owner(
    type: Type19,
    entity_id: str = Path(..., alias='entityId'),
    size: Optional[Size] = None,
    format: Optional[Format] = None,
):
    """
    Get avatar image by owner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/user',
    description=""" Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.

**[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). """,
    tags=['user_creation_deletion', 'user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def remove_user(
    account_id: constr(max_length=128) = Query(..., alias='accountId'),
    username: Optional[str] = None,
    key: Optional[str] = None,
):
    """
    Delete user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user',
    description=""" Returns a user.

Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_management', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    username: Optional[str] = None,
    key: Optional[str] = None,
    expand: Optional[str] = None,
):
    """
    Get user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/user',
    description=""" Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.

If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_creation_deletion', 'user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_user(body: NewUserDetails):
    """
    Create user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/assignable/multiProjectSearch',
    description=""" Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None. """,
    tags=['user_group_operations', 'user_management', 'user_query_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_bulk_assignable_users(
    query: Optional[str] = None,
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    project_keys: str = Query(..., alias='projectKeys'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Find users assignable to projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/assignable/search',
    description=""" Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:

 *  a new issue, by providing the `projectKeyOrId`.
 *  an updated issue, by providing the `issueKey`.
 *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).

In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_group_operations', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_assignable_users(
    query: Optional[str] = None,
    session_id: Optional[str] = Query(None, alias='sessionId'),
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    project: Optional[str] = None,
    issue_key: Optional[str] = Query(None, alias='issueKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    action_descriptor_id: Optional[int_aliased] = Query(
        None, alias='actionDescriptorId'
    ),
    recommend: Optional[bool] = False,
):
    """
    Find users assignable to issues
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/bulk',
    description=""" Returns a [paginated](#pagination) list of the users specified by one or more account IDs.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_query_operations', 'user_info_retrieval', 'user_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_get_users(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(10, alias='maxResults'),
    username: Optional[Username] = None,
    key: Optional[Key] = None,
    account_id: AccountId = Query(..., alias='accountId'),
):
    """
    Bulk get users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/bulk/migration',
    description=""" Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['user_info_retrieval', 'user_query_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_get_users_migration(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(10, alias='maxResults'),
    username: Optional[Username] = None,
    key: Optional[Key] = None,
):
    """
    Get account IDs for users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/user/columns',
    description=""" Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
 *  Permission to access Jira, to set the calling user's columns. """,
    tags=['user_columns_management', 'user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def reset_user_columns(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    username: Optional[str] = None,
):
    """
    Reset user default columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/columns',
    description=""" Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
 *  Permission to access Jira, to get the calling user's column details. """,
    tags=['user_info_retrieval', 'user_columns_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_default_columns(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    username: Optional[str] = None,
):
    """
    Get user default columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/user/columns',
    description=""" Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.

The parameters for this resource are expressed as HTML form data. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
 *  Permission to access Jira, to set the calling user's columns. """,
    tags=['user_columns_management', 'user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_user_columns(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    file: UploadFile = ...,
):
    """
    Set user default columns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/email',
    description=""" Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). """,
    tags=['user_info_retrieval', 'user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_user_email(account_id: constr(max_length=128) = Query(..., alias='accountId')):
    """
    Get user email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/email/bulk',
    description=""" Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). """,
    tags=['user_info_retrieval', 'user_query_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_user_email_bulk(account_id: AccountId1 = Query(..., alias='accountId')):
    """
    Get user email bulk
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/groups',
    description=""" Returns the groups to which a user belongs.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_group_operations', 'user_info_retrieval', 'group_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_groups(
    account_id: constr(max_length=128) = Query(..., alias='accountId'),
    username: Optional[str] = None,
    key: Optional[str] = None,
):
    """
    Get user groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/permission/search',
    description=""" Returns a list of users who fulfill these criteria:

 *  their user attributes match a search string.
 *  they have a set of permissions for a project or issue.

If no search string is provided, a list of all users with the permissions is returned.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project. """,
    tags=[
        'user_permissions_management',
        'user_group_operations',
        'user_info_retrieval',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users_with_all_permissions(
    query: Optional[str] = None,
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    permissions: str = ...,
    issue_key: Optional[str] = Query(None, alias='issueKey'),
    project_key: Optional[str] = Query(None, alias='projectKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Find users with permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/picker',
    description=""" Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.

This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only. """,
    tags=['user_management', 'user_query_operations', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users_for_picker(
    query: str,
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    show_avatar: Optional[bool] = Query(False, alias='showAvatar'),
    exclude: Optional[Exclude] = None,
    exclude_account_ids: Optional[ExcludeAccountIds] = Query(
        None, alias='excludeAccountIds'
    ),
    avatar_size: Optional[str] = Query(None, alias='avatarSize'),
    exclude_connect_users: Optional[bool] = Query(False, alias='excludeConnectUsers'),
):
    """
    Find users for picker
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/properties',
    description=""" Returns the keys of all properties for a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
 *  Access to Jira, to access the calling user's property keys. """,
    tags=['user_info_retrieval', 'user_management', 'user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_property_keys(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    user_key: Optional[str] = Query(None, alias='userKey'),
    username: Optional[str] = None,
):
    """
    Get user property keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/user/properties/{propertyKey}',
    description=""" Deletes a property from a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
 *  Access to Jira, to delete a property from the calling user's record. """,
    tags=['custom_field_management', 'issue_property_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_user_property(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    user_key: Optional[str] = Query(None, alias='userKey'),
    username: Optional[str] = None,
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete user property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/properties/{propertyKey}',
    description=""" Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
 *  Access to Jira, to get a property from the calling user's record. """,
    tags=['user_info_retrieval', 'user_management', 'user_preferences_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_property(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    user_key: Optional[str] = Query(None, alias='userKey'),
    username: Optional[str] = None,
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get user property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/user/properties/{propertyKey}',
    description=""" Sets the value of a user's property. Use this resource to store custom data against a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
 *  Access to Jira, to set a property on the calling user's record. """,
    tags=[
        'user_management',
        'user_permissions_management',
        'user_preferences_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_user_property(
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    user_key: Optional[str] = Query(None, alias='userKey'),
    username: Optional[str] = None,
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set user property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/search',
    description=""" Returns a list of users that match the search string and property.

This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

This operation can be accessed anonymously.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results. """,
    tags=['user_info_retrieval', 'user_query_operations', 'group_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users(
    query: Optional[str] = None,
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    property: Optional[str] = None,
):
    """
    Find users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/search/query',
    description=""" Finds users with a structured query and returns a [paginated](#pagination) list of user details.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

The query statements are:

 *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
 *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
 *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
 *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
 *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
 *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
 *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
 *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:

`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"` """,
    tags=['user_query_operations', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users_by_query(
    query: str,
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Find users by query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/search/query/key',
    description=""" Finds users with a structured query and returns a [paginated](#pagination) list of user keys.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

The query statements are:

 *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
 *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
 *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
 *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
 *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
 *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
 *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
 *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.

The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:

`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"` """,
    tags=['user_query_operations', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_user_keys_by_query(
    query: str,
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Find user keys by query
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/user/viewissue/search',
    description=""" Returns a list of users who fulfill these criteria:

 *  their user attributes match a search string.
 *  they have permission to browse issues.

Use this resource to find users who can browse:

 *  an issue, by providing the `issueKey`.
 *  any issue in a project, by providing the `projectKey`.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results. """,
    tags=[
        'user_permissions_management',
        'user_group_operations',
        'user_info_retrieval',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_users_with_browse_permission(
    query: Optional[str] = None,
    username: Optional[str] = None,
    account_id: Optional[constr(max_length=128)] = Query(None, alias='accountId'),
    issue_key: Optional[str] = Query(None, alias='issueKey'),
    project_key: Optional[str] = Query(None, alias='projectKey'),
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Find users with browse permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/users',
    description=""" Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_management', 'user_info_retrieval'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_users_default(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get all users default
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/users/search',
    description=""" Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['user_management', 'user_info_retrieval', 'user_query_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_users(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get all users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/version',
    description=""" Creates a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_version(body: Version):
    """
    Create version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/version/{id}',
    description=""" Deletes a project version.

Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.

Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. """,
    tags=['version_management', 'issue_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_version(
    id: str,
    move_fix_issues_to: Optional[str] = Query(None, alias='moveFixIssuesTo'),
    move_affected_issues_to: Optional[str] = Query(None, alias='moveAffectedIssuesTo'),
):
    """
    Delete version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/version/{id}',
    description=""" Returns a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_version(id: str, expand: Optional[str] = None):
    """
    Get version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/version/{id}',
    description=""" Updates a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_version(id: str, body: Version = ...):
    """
    Update version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/version/{id}/mergeto/{moveIssuesTo}',
    description=""" Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.

Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def merge_versions(id: str, move_issues_to: str = Path(..., alias='moveIssuesTo')):
    """
    Merge versions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/version/{id}/move',
    description=""" Modifies the version's sequence within the project, which affects the display order of the versions in Jira.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def move_version(id: str, body: VersionMoveBean = ...):
    """
    Move version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/version/{id}/relatedIssueCounts',
    description=""" Returns the following counts for a version:

 *  Number of issues where the `fixVersion` is set to the version.
 *  Number of issues where the `affectedVersion` is set to the version.
 *  Number of issues where a version custom field is set to the version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. """,
    tags=['issue_management', 'version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_version_related_issues(id: str):
    """
    Get version's related issues count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/version/{id}/removeAndSwap',
    description=""" Deletes a project version.

Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. """,
    tags=['version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_and_replace_version(id: str, body: DeleteAndReplaceVersionBean = ...):
    """
    Delete and replace version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/version/{id}/unresolvedIssueCount',
    description=""" Returns counts of the issues and unresolved issues for the project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. """,
    tags=['issue_management', 'version_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_version_unresolved_issues(id: str):
    """
    Get version's unresolved issues count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/webhook',
    description=""" Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation. """,
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_webhook_by_id(body: ContainerForWebhookIDs):
    """
    Delete webhooks by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/webhook',
    description=""" Returns a [paginated](#pagination) list of the webhooks registered by the calling app.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation. """,
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_dynamic_webhooks_for_app(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(100, alias='maxResults'),
):
    """
    Get dynamic webhooks for app
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/webhook',
    description=""" Registers webhooks.

**NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation. """,
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def register_dynamic_webhooks(body: WebhookRegistrationDetails):
    """
    Register dynamic webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/webhook/failed',
    description=""" Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.

After 72 hours the failure may no longer be returned by this operation.

The oldest failure is returned first.

This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.

**[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation. """,
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_failed_webhooks(
    max_results: Optional[int_aliased] = Query(None, alias='maxResults'),
    after: Optional[int_aliased] = None,
):
    """
    Get failed webhooks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/webhook/refresh',
    description=""" Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.

Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation. """,
    tags=['webhook_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def refresh_webhooks(body: ContainerForWebhookIDs):
    """
    Extend webhook life
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflow',
    description=""" Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).

If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_workflows(workflow_name: Optional[str] = Query(None, alias='workflowName')):
    """
    Get all workflows
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/workflow',
    description=""" Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used.

#### Conditions ####

Conditions enable workflow rules that govern whether a transition can execute.

##### Always false condition #####

A condition that always fails.

    {
       "type": "AlwaysFalseCondition"
     }

##### Block transition until approval #####

A condition that blocks issue transition if there is a pending approval.

    {
       "type": "BlockInProgressApprovalCondition"
     }

##### Compare number custom field condition #####

A condition that allows transition if a comparison between a number custom field and a value is true.

    {
       "type": "CompareNumberCFCondition",
       "configuration": {
         "comparator": "=",
         "fieldId": "customfield_10029",
         "fieldValue": 2
       }
     }

 *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
 *  `fieldId` The custom numeric field ID. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *  `com.pyxis.greenhopper.jira:jsw-story-points`
 *  `fieldValue` The value for comparison.

##### Hide from user condition #####

A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.

    {
       "type": "RemoteOnlyCondition"
     }

##### Only assignee condition #####

A condition that allows only the assignee to execute a transition.

    {
       "type": "AllowOnlyAssignee"
     }

##### Only Bamboo notifications workflow condition #####

A condition that makes the transition available only to Bamboo build notifications.

    {
       "type": "OnlyBambooNotificationsCondition"
     }

##### Only reporter condition #####

A condition that allows only the reporter to execute a transition.

    {
       "type": "AllowOnlyReporter"
     }

##### Permission condition #####

A condition that allows only users with a permission to execute a transition.

    {
       "type": "PermissionCondition",
       "configuration": {
           "permissionKey": "BROWSE_PROJECTS"
       }
     }

 *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.

##### Previous status condition #####

A condition that allows a transition based on whether an issue has or has not transitioned through a status.

    {
       "type": "PreviousStatusCondition",
       "configuration": {
         "ignoreLoopTransitions": true,
         "includeCurrentStatus": true,
         "mostRecentStatusOnly": true,
         "reverseCondition": true,
         "previousStatus": {
           "id": "5"
         }
       }
     }

By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:

 *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
 *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
 *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
 *  `reverseCondition` is `true`, then the status must not be present.

##### Separation of duties condition #####

A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.

    {
       "type": "SeparationOfDutiesCondition",
       "configuration": {
         "fromStatus": {
           "id": "5"
         },
         "toStatus": {
           "id": "6"
         }
       }
     }

 *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
 *  `toStatus` An object containing the ID of the target status of the transition that is blocked.

##### Subtask blocking condition #####

A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.

    {
       "type": "SubTaskBlockingCondition",
       "configuration": {
         "statuses": [
           {
             "id": "1"
           },
           {
             "id": "3"
           }
         ]
       }
     }

 *  `statuses` A list of objects containing status IDs.

##### User is in any group condition #####

A condition that allows users belonging to any group from a list of groups to execute a transition.

    {
       "type": "UserInAnyGroupCondition",
       "configuration": {
         "groups": [
           "administrators",
           "atlassian-addons-admin"
         ]
       }
     }

 *  `groups` A list of group names.

##### User is in any project role condition #####

A condition that allows only users with at least one project roles from a list of project roles to execute a transition.

    {
       "type": "InAnyProjectRoleCondition",
       "configuration": {
         "projectRoles": [
           {
             "id": "10002"
           },
           {
             "id": "10003"
           },
           {
             "id": "10012"
           },
           {
             "id": "10013"
           }
         ]
       }
     }

 *  `projectRoles` A list of objects containing project role IDs.

##### User is in custom field condition #####

A condition that allows only users listed in a given custom field to execute the transition.

    {
       "type": "UserIsInCustomFieldCondition",
       "configuration": {
         "allowUserInField": false,
         "fieldId": "customfield_10010"
       }
     }

 *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
 *  `fieldId` The ID of the field containing the list of users.

##### User is in group condition #####

A condition that allows users belonging to a group to execute a transition.

    {
       "type": "UserInGroupCondition",
       "configuration": {
         "group": "administrators"
       }
     }

 *  `group` The name of the group.

##### User is in group custom field condition #####

A condition that allows users belonging to a group specified in a custom field to execute a transition.

    {
       "type": "InGroupCFCondition",
       "configuration": {
         "fieldId": "customfield_10012"
       }
     }

 *  `fieldId` The ID of the field. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *  `com.pyxis.greenhopper.jira:gh-epic-status`

##### User is in project role condition #####

A condition that allows users with a project role to execute a transition.

    {
       "type": "InProjectRoleCondition",
       "configuration": {
         "projectRole": {
           "id": "10002"
         }
       }
     }

 *  `projectRole` An object containing the ID of a project role.

##### Value field condition #####

A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.

    {
       "type": "ValueFieldCondition",
       "configuration": {
         "fieldId": "assignee",
         "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
         "comparisonType": "NUMBER",
         "comparator": "="
       }
     }

 *  `fieldId` The ID of a field used in the comparison.
 *  `fieldValue` The expected value of the field.
 *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
 *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.

**Notes:**

 *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
 *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
 *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.

#### Validators ####

Validators check that any input made to the transition is valid before the transition is performed.

##### Date field validator #####

A validator that compares two dates.

    {
       "type": "DateFieldValidator",
       "configuration": {
           "comparator": ">",
           "date1": "updated",
           "date2": "created",
           "expression": "1d",
           "includeTime": true
         }
     }

 *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
 *  `date1` The date field to validate. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
 *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.

##### Windows date validator #####

A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.

    {
       "type": "WindowsDateValidator",
       "configuration": {
           "date1": "customfield_10009",
           "date2": "created",
           "windowsDays": 5
         }
     }

 *  `date1` The date field to validate. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `date2` The reference date. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `windowsDays` A positive integer indicating a number of days.

##### Field required validator #####

A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.

    {
         "type": "FieldRequiredValidator",
         "configuration": {
             "ignoreContext": true,
             "errorMessage": "Hey",
             "fieldIds": [
                 "versions",
                 "customfield_10037",
                 "customfield_10003"
             ]
         }
     }

 *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
 *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
 *  `fieldIds` The list of fields to validate.

##### Field changed validator #####

A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.

    {
         "type": "FieldChangedValidator",
         "configuration": {
             "fieldId": "comment",
             "errorMessage": "Hey",
             "exemptedGroups": [
                 "administrators",
                 "atlassian-addons-admin"
             ]
         }
     }

 *  `fieldId` The ID of a field.
 *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
 *  `exemptedGroups` OPTIONAL. The list of groups.

##### Field has single value validator #####

A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.

    {
         "type": "FieldHasSingleValueValidator",
         "configuration": {
             "fieldId": "attachment,
             "excludeSubtasks": true
         }
     }

 *  `fieldId` The ID of a field.
 *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.

##### Parent status validator #####

A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.

    {
         "type": "ParentStatusValidator",
         "configuration": {
             "parentStatuses": [
                 {
                   "id":"1"
                 },
                 {
                   "id":"2"
                 }
             ]
         }
     }

 *  `parentStatus` The list of required parent issue statuses.

##### Permission validator #####

A validator that checks the user has a permission.

    {
       "type": "PermissionValidator",
       "configuration": {
           "permissionKey": "ADMINISTER_PROJECTS"
       }
     }

 *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.

##### Previous status validator #####

A validator that checks if the issue has held a status.

    {
       "type": "PreviousStatusValidator",
       "configuration": {
           "mostRecentStatusOnly": false,
           "previousStatus": {
               "id": "15"
           }
       }
     }

 *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
 *  `previousStatus` An object containing the ID of an issue status.

##### Regular expression validator #####

A validator that checks the content of a field against a regular expression.

    {
       "type": "RegexpFieldValidator",
       "configuration": {
           "regExp": "[0-9]",
           "fieldId": "customfield_10029"
       }
     }

 *  `regExp`A regular expression.
 *  `fieldId` The ID of a field. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *  `com.pyxis.greenhopper.jira:jsw-story-points`
     *  `com.pyxis.greenhopper.jira:gh-epic-status`
     *  `description`
     *  `summary`

##### User permission validator #####

A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.

    {
         "type": "UserPermissionValidator",
         "configuration": {
             "permissionKey": "BROWSE_PROJECTS",
             "nullAllowed": false,
             "username": "TestUser"
         }
     }

 *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
 *  `nullAllowed` If `true`, allows the transition when `username` is empty.
 *  `username` The username to validate against the `permissionKey`.

#### Post functions ####

Post functions carry out any additional processing required after a Jira workflow transition is executed.

##### Fire issue event function #####

A post function that fires an event that is processed by the listeners.

    {
       "type": "FireIssueEventFunction",
       "configuration": {
         "event": {
           "id":"1"
         }
       }
     }

**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.

 *  `event` An object containing the ID of the issue event.

##### Update issue status #####

A post function that sets issue status to the linked status of the destination workflow status.

    {
       "type": "UpdateIssueStatusFunction"
     }

**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.

##### Create comment #####

A post function that adds a comment entered during the transition to an issue.

    {
       "type": "CreateCommentFunction"
     }

**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.

##### Store issue #####

A post function that stores updates to an issue.

    {
       "type": "IssueStoreFunction"
     }

**Note:** This post function can only be added to the initial transition and can only be added once.

##### Assign to current user function #####

A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.

    {
         "type": "AssignToCurrentUserFunction"
     }

**Note:** This post function can be included once in a transition.

##### Assign to lead function #####

A post function that assigns the issue to the project or component lead developer.

    {
         "type": "AssignToLeadFunction"
     }

**Note:** This post function can be included once in a transition.

##### Assign to reporter function #####

A post function that assigns the issue to the reporter.

    {
         "type": "AssignToReporterFunction"
     }

**Note:** This post function can be included once in a transition.

##### Clear field value function #####

A post function that clears the value from a field.

    {
       "type": "ClearFieldValuePostFunction",
       "configuration": {
         "fieldId": "assignee"
       }
     }

 *  `fieldId` The ID of the field.

##### Copy value from other field function #####

A post function that copies the value of one field to another, either within an issue or from parent to subtask.

    {
       "type": "CopyValueFromOtherFieldPostFunction",
       "configuration": {
         "sourceFieldId": "assignee",
         "destinationFieldId": "creator",
         "copyType": "same"
       }
     }

 *  `sourceFieldId` The ID of the source field.
 *  `destinationFieldId` The ID of the destination field.
 *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.

##### Create Crucible review workflow function #####

A post function that creates a Crucible review for all unreviewed code for the issue.

    {
         "type": "CreateCrucibleReviewWorkflowFunction"
     }

**Note:** This post function can be included once in a transition.

##### Set issue security level based on user's project role function #####

A post function that sets the issue's security level if the current user has a project role.

    {
       "type": "SetIssueSecurityFromRoleFunction",
       "configuration": {
         "projectRole": {
             "id":"10002"
         },
         "issueSecurityLevel": {
             "id":"10000"
         }
       }
     }

 *  `projectRole` An object containing the ID of the project role.
 *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.

##### Trigger a webhook function #####

A post function that triggers a webhook.

    {
       "type": "TriggerWebhookFunction",
       "configuration": {
         "webhook": {
           "id": "1"
         }
       }
     }

 *  `webhook` An object containing the ID of the webhook listener to trigger.

##### Update issue custom field function #####

A post function that updates the content of an issue custom field.

    {
       "type": "UpdateIssueCustomFieldPostFunction",
       "configuration": {
         "mode": "append",
         "fieldId": "customfield_10003",
         "fieldValue": "yikes"
       }
     }

 *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
 *  `fieldId` The ID of the field.
 *  `fieldValue` The update content.

##### Update issue field function #####

A post function that updates a simple issue field.

    {
       "type": "UpdateIssueFieldFunction",
       "configuration": {
         "fieldId": "assignee",
         "fieldValue": "5f0c277e70b8a90025a00776"
       }
     }

 *  `fieldId` The ID of the field. Allowed field types:
    
     *  `assignee`
     *  `description`
     *  `environment`
     *  `priority`
     *  `resolution`
     *  `summary`
     *  `timeoriginalestimate`
     *  `timeestimate`
     *  `timespent`
 *  `fieldValue` The update value.
 *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
    
     *  an account ID.
     *  `automatic`.
     *  a blank string, which sets the value to `unassigned`.

#### Connect rules ####

Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.

    {
       "type": "appKey__moduleKey",
       "configuration": {
         "value":"{\"isValid\":\"true\"}"
       }
     }

 *  `type` A Connect rule key in a form of `appKey__moduleKey`.
 *  `value` The stringified JSON configuration of a Connect rule.

#### Forge rules ####

Forge transition rules are not yet supported.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_workflow(body: CreateWorkflowDetails):
    """
    Create workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflow/rule/config',
    description=""" Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:

 *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
 *  matching one or more transition rule keys.

Only workflows containing transition rules created by the calling Connect app are returned.

Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.

**[Permissions](#permissions) required:** Only Connect apps can use this operation. """,
    tags=['workflow_management', 'workflow_rule_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_transition_rule_configurations(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[conint(le=50)] = Query(10, alias='maxResults'),
    types: Types = ...,
    keys: Optional[Keys] = None,
    workflow_names: Optional[WorkflowNames] = Query(None, alias='workflowNames'),
    with_tags: Optional[WithTags] = Query(None, alias='withTags'),
    draft: Optional[bool] = None,
    expand: Optional[str] = None,
):
    """
    Get workflow transition rule configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflow/rule/config',
    description=""" Updates configuration of workflow transition rules. The following rule types are supported:

 *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
 *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
 *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)

Only rules created by the calling Connect app can be updated.

To assist with app migration, this operation can be used to:

 *  Disable a rule.
 *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).

Rules are enabled if the `disabled` parameter is not provided.

**[Permissions](#permissions) required:** Only Connect apps can use this operation. """,
    tags=['workflow_management', 'workflow_rule_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_workflow_transition_rule_configurations(body: WorkflowTransitionRulesUpdate):
    """
    Update workflow transition rule configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflow/rule/config/delete',
    description=""" Deletes workflow transition rules from one or more workflows. These rule types are supported:

 *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
 *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
 *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)

Only rules created by the calling Connect app can be deleted.

**[Permissions](#permissions) required:** Only Connect apps can use this operation. """,
    tags=['workflow_management', 'workflow_rule_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_workflow_transition_rule_configurations(
    body: WorkflowsWithTransitionRulesDetails,
):
    """
    Delete workflow transition rule configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflow/search',
    description=""" Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.

This operation does not return next-gen workflows.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'draft_workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflows_paginated(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
    workflow_name: Optional[WorkflowName2] = Query(None, alias='workflowName'),
    expand: Optional[str] = None,
    query_string: Optional[str] = Query(None, alias='queryString'),
    order_by: Optional[OrderBy22] = Query(None, alias='orderBy'),
    is_active: Optional[bool] = Query(None, alias='isActive'),
):
    """
    Get workflows paginated
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflow/transitions/{transitionId}/properties',
    description=""" Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_rule_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_transition_property(
    transition_id: int_aliased = Path(..., alias='transitionId'),
    key: str = ...,
    workflow_name: str = Query(..., alias='workflowName'),
    workflow_mode: Optional[WorkflowMode] = Query(None, alias='workflowMode'),
):
    """
    Delete workflow transition property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflow/transitions/{transitionId}/properties',
    description=""" Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_rule_management', 'issue_transitions'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_transition_properties(
    transition_id: int_aliased = Path(..., alias='transitionId'),
    include_reserved_keys: Optional[bool] = Query(False, alias='includeReservedKeys'),
    key: Optional[str] = None,
    workflow_name: str = Query(..., alias='workflowName'),
    workflow_mode: Optional[WorkflowMode] = Query('live', alias='workflowMode'),
):
    """
    Get workflow transition properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/workflow/transitions/{transitionId}/properties',
    description=""" Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_transition_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_workflow_transition_property(
    transition_id: int_aliased = Path(..., alias='transitionId'),
    key: str = ...,
    workflow_name: str = Query(..., alias='workflowName'),
    workflow_mode: Optional[WorkflowMode] = Query('live', alias='workflowMode'),
    body: WorkflowTransitionProperty = ...,
):
    """
    Create workflow transition property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflow/transitions/{transitionId}/properties',
    description=""" Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'issue_transitions', 'workflow_rule_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_workflow_transition_property(
    transition_id: int_aliased = Path(..., alias='transitionId'),
    key: str = ...,
    workflow_name: str = Query(..., alias='workflowName'),
    workflow_mode: Optional[WorkflowMode] = Query(None, alias='workflowMode'),
    body: WorkflowTransitionProperty = ...,
):
    """
    Update workflow transition property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflow/{entityId}',
    description=""" Deletes a workflow.

The workflow cannot be deleted if it is:

 *  an active workflow.
 *  a system workflow.
 *  associated with any workflow scheme.
 *  associated with any draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_inactive_workflow(entity_id: str = Path(..., alias='entityId')):
    """
    Delete inactive workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme',
    description=""" Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_all_workflow_schemes(
    start_at: Optional[int_aliased] = Query(0, alias='startAt'),
    max_results: Optional[int_aliased] = Query(50, alias='maxResults'),
):
    """
    Get all workflow schemes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/workflowscheme',
    description=""" Creates a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_workflow_scheme(body: WorkflowScheme):
    """
    Create workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/project',
    description=""" Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.

If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_scheme_project_associations(
    project_id: ProjectId7 = Query(..., alias='projectId')
):
    """
    Get workflow scheme project associations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/project',
    description=""" Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.

Workflow schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def assign_scheme_to_project(body: WorkflowSchemeProjectAssociation):
    """
    Assign workflow scheme to project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}',
    description=""" Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_scheme_management', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_scheme(id: int_aliased):
    """
    Delete workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}',
    description=""" Returns a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_scheme_management', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_scheme(
    id: int_aliased,
    return_draft_if_exists: Optional[bool] = Query(False, alias='returnDraftIfExists'),
):
    """
    Get workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}',
    description=""" Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_workflow_scheme(id: int_aliased, body: WorkflowScheme = ...):
    """
    Update workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/workflowscheme/{id}/createdraft',
    description=""" Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_workflow_scheme_draft_from_parent(id: int_aliased):
    """
    Create draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/default',
    description=""" Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'draft_workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_default_workflow(
    id: int_aliased,
    update_draft_if_needed: Optional[bool] = Query(None, alias='updateDraftIfNeeded'),
):
    """
    Delete default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/default',
    description=""" Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management', 'draft_workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_default_workflow(
    id: int_aliased,
    return_draft_if_exists: Optional[bool] = Query(False, alias='returnDraftIfExists'),
):
    """
    Get default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/default',
    description=""" Sets the default workflow for a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_default_workflow(id: int_aliased, body: DefaultWorkflow = ...):
    """
    Update default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/draft',
    description=""" Deletes a draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_scheme_management', 'draft_workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_scheme_draft(id: int_aliased):
    """
    Delete draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/draft',
    description=""" Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  
Note that:

 *  Only active workflow schemes can have draft workflow schemes.
 *  An active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_scheme_draft(id: int_aliased):
    """
    Get draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/draft',
    description=""" Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_workflow_scheme_draft(id: int_aliased, body: WorkflowScheme = ...):
    """
    Update draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/draft/default',
    description=""" Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['draft_workflow_management', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_draft_default_workflow(id: int_aliased):
    """
    Delete draft default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/draft/default',
    description=""" Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['draft_workflow_management', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_draft_default_workflow(id: int_aliased):
    """
    Get draft default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/draft/default',
    description=""" Sets the default workflow for a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['draft_workflow_management', 'workflow_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_draft_default_workflow(id: int_aliased, body: DefaultWorkflow = ...):
    """
    Update draft default workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
    description=""" Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_scheme_draft_issue_type(
    id: int_aliased, issue_type: str = Path(..., alias='issueType')
):
    """
    Delete workflow for issue type in draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
    description=""" Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_scheme_draft_issue_type(
    id: int_aliased, issue_type: str = Path(..., alias='issueType')
):
    """
    Get workflow for issue type in draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}',
    description=""" Sets the workflow for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_workflow_scheme_draft_issue_type(
    id: int_aliased,
    issue_type: str = Path(..., alias='issueType'),
    body: IssueTypeWorkflowMapping = ...,
):
    """
    Set workflow for issue type in draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/workflowscheme/{id}/draft/publish',
    description=""" Publishes a draft workflow scheme.

Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def publish_draft_workflow_scheme(
    id: int_aliased,
    validate_only: Optional[bool] = Query(False, alias='validateOnly'),
    body: PublishDraftWorkflowScheme = ...,
):
    """
    Publish draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/draft/workflow',
    description=""" Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'issue_type_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_draft_workflow_mapping(
    id: int_aliased, workflow_name: str = Query(..., alias='workflowName')
):
    """
    Delete issue types for workflow in draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/draft/workflow',
    description=""" Returns the workflow-issue type mappings for a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_scheme_management',
        'workflow_issue_type_operations',
        'draft_workflow_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_draft_workflow(
    id: int_aliased, workflow_name: Optional[str] = Query(None, alias='workflowName')
):
    """
    Get issue types for workflows in draft workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/draft/workflow',
    description=""" Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_draft_workflow_mapping(
    id: int_aliased,
    workflow_name: str = Query(..., alias='workflowName'),
    body: IssueTypesWorkflowMapping = ...,
):
    """
    Set issue types for workflow in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
    description=""" Deletes the issue type-workflow mapping for an issue type in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_scheme_issue_type(
    id: int_aliased,
    issue_type: str = Path(..., alias='issueType'),
    update_draft_if_needed: Optional[bool] = Query(None, alias='updateDraftIfNeeded'),
):
    """
    Delete workflow for issue type in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
    description=""" Returns the issue type-workflow mapping for an issue type in a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow_scheme_issue_type(
    id: int_aliased,
    issue_type: str = Path(..., alias='issueType'),
    return_draft_if_exists: Optional[bool] = Query(False, alias='returnDraftIfExists'),
):
    """
    Get workflow for issue type in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}',
    description=""" Sets the workflow for an issue type in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def set_workflow_scheme_issue_type(
    id: int_aliased,
    issue_type: str = Path(..., alias='issueType'),
    body: IssueTypeWorkflowMapping = ...,
):
    """
    Set workflow for issue type in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/api/3/workflowscheme/{id}/workflow',
    description=""" Deletes the workflow-issue type mapping for a workflow in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_workflow_mapping(
    id: int_aliased,
    workflow_name: str = Query(..., alias='workflowName'),
    update_draft_if_needed: Optional[bool] = Query(None, alias='updateDraftIfNeeded'),
):
    """
    Delete issue types for workflow in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/workflowscheme/{id}/workflow',
    description=""" Returns the workflow-issue type mappings for a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=['workflow_issue_type_operations', 'workflow_scheme_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_workflow(
    id: int_aliased,
    workflow_name: Optional[str] = Query(None, alias='workflowName'),
    return_draft_if_exists: Optional[bool] = Query(False, alias='returnDraftIfExists'),
):
    """
    Get issue types for workflows in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/api/3/workflowscheme/{id}/workflow',
    description=""" Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). """,
    tags=[
        'workflow_management',
        'workflow_scheme_management',
        'workflow_issue_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_workflow_mapping(
    id: int_aliased,
    workflow_name: str = Query(..., alias='workflowName'),
    body: IssueTypesWorkflowMapping = ...,
):
    """
    Set issue types for workflow in workflow scheme
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/worklog/deleted',
    description=""" Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.

This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

This resource does not return worklogs deleted during the minute preceding the request.

**[Permissions](#permissions) required:** Permission to access Jira. """,
    tags=['worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_ids_of_worklogs_deleted_since(since: Optional[int_aliased] = 0):
    """
    Get IDs of deleted worklogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/api/3/worklog/list',
    description=""" Returns worklog details for a list of worklog IDs.

The returned list of worklogs is limited to 1000 items.

**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

 *  the worklog is set as *Viewable by All Users*.
 *  the user is a member of a project role or group with permission to view the worklog. """,
    tags=['worklog_management', 'time_tracking_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_worklogs_for_ids(expand: Optional[str] = '', body: WorklogIdsRequestBean = ...):
    """
    Get worklogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/api/3/worklog/updated',
    description=""" Returns a list of IDs and update timestamps for worklogs updated after a date and time.

This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

This resource does not return worklogs updated during the minute preceding the request.

**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

 *  the worklog is set as *Viewable by All Users*.
 *  the user is a member of a project role or group with permission to view the worklog. """,
    tags=['worklog_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_ids_of_worklogs_modified_since(
    since: Optional[int_aliased] = 0, expand: Optional[str] = ''
):
    """
    Get IDs of updated worklogs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/atlassian-connect/1/addons/{addonKey}/properties',
    description=""" Gets all the properties of an app.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/). """,
    tags=['application_property_management', 'addon_properties_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def addon_properties_resource_get_addon_properties_get(
    addon_key: str = Path(..., alias='addonKey')
):
    """
    Get app properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
    description=""" Deletes an app's property.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. """,
    tags=['application_property_management', 'addon_properties_management'],
)
def addon_properties_resource_delete_addon_property_delete(
    addon_key: str = Path(..., alias='addonKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Delete app property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
    description=""" Returns the key and value of an app's property.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/). """,
    tags=['application_property_management', 'addon_properties_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def addon_properties_resource_get_addon_property_get(
    addon_key: str = Path(..., alias='addonKey'),
    property_key: str = Path(..., alias='propertyKey'),
):
    """
    Get app property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}',
    description=""" Sets the value of an app's property. Use this resource to store custom data for your app.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. """,
    tags=['application_property_management', 'addon_properties_management'],
)
def addon_properties_resource_put_addon_property_put(
    addon_key: str = Path(..., alias='addonKey'),
    property_key: str = Path(..., alias='propertyKey'),
    body: Any = ...,
):
    """
    Set app property
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/rest/atlassian-connect/1/app/module/dynamic',
    description=""" Remove all or a list of modules registered by the calling app.

**[Permissions](#permissions) required:** Only Connect apps can make this request. """,
    tags=['dynamic_module_management'],
)
def dynamic_modules_resource_remove_modules_delete(
    module_key: Optional[ModuleKey] = Query(None, alias='moduleKey')
):
    """
    Remove modules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rest/atlassian-connect/1/app/module/dynamic',
    description=""" Returns all modules registered dynamically by the calling app.

**[Permissions](#permissions) required:** Only Connect apps can make this request. """,
    tags=['dynamic_module_management'],
)
def dynamic_modules_resource_get_modules_get():
    """
    Get modules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/atlassian-connect/1/app/module/dynamic',
    description=""" Registers a list of modules.

**[Permissions](#permissions) required:** Only Connect apps can make this request. """,
    tags=['dynamic_module_management'],
)
def dynamic_modules_resource_register_modules_post(body: ConnectModules):
    """
    Register modules
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/atlassian-connect/1/migration/field',
    description=""" Updates the value of a custom field added by Connect apps on one or more issues.
The values of up to 200 custom fields can be updated.

**[Permissions](#permissions) required:** Only Connect apps can make this request. """,
    tags=['custom_field_management', 'bulk_update_operations'],
)
def app_issue_field_value_update_resource_update_issue_fields_put(
    atlassian__transfer__id: UUID = Header(..., alias='Atlassian-Transfer-Id'),
    body: ConnectCustomFieldValues = ...,
):
    """
    Bulk update custom field value
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/rest/atlassian-connect/1/migration/properties/{entityType}',
    description=""" Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration. """,
    tags=['bulk_update_operations', 'issue_property_management'],
)
def migration_resource_update_entity_properties_value_put(
    atlassian__transfer__id: UUID = Header(..., alias='Atlassian-Transfer-Id'),
    entity_type: EntityType = Path(..., alias='entityType'),
    body: RestAtlassianConnect1MigrationPropertiesEntityTypePutRequest = ...,
):
    """
    Bulk update entity properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rest/atlassian-connect/1/migration/workflow/rule/search',
    description=""" Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app. """,
    tags=['workflow_management', 'workflow_rule_management'],
)
def migration_resource_workflow_rule_search_post(
    atlassian__transfer__id: UUID = Header(..., alias='Atlassian-Transfer-Id'),
    body: WorkflowRulesSearch = ...,
):
    """
    Get workflow transition rule configurations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
